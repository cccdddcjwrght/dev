// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ItemDropRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ItemDropRowData GetRootAsItemDropRowData(ByteBuffer _bb) { return GetRootAsItemDropRowData(_bb, new ItemDropRowData()); }
  public static ItemDropRowData GetRootAsItemDropRowData(ByteBuffer _bb, ItemDropRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemDropRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Num { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Repeat { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetItemIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetItemIdArray() { return __p.__vector_as_array<int>(10); }
  public int Weight(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int WeightLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetWeightBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetWeightBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetWeightArray() { return __p.__vector_as_array<int>(12); }

  public static Offset<GameConfigs.ItemDropRowData> CreateItemDropRowData(FlatBufferBuilder builder,
      int Id = 0,
      int Num = 0,
      int Repeat = 0,
      VectorOffset ItemIdOffset = default(VectorOffset),
      VectorOffset WeightOffset = default(VectorOffset)) {
    builder.StartTable(5);
    ItemDropRowData.AddWeight(builder, WeightOffset);
    ItemDropRowData.AddItemId(builder, ItemIdOffset);
    ItemDropRowData.AddRepeat(builder, Repeat);
    ItemDropRowData.AddNum(builder, Num);
    ItemDropRowData.AddId(builder, Id);
    return ItemDropRowData.EndItemDropRowData(builder);
  }

  public static void StartItemDropRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddNum(FlatBufferBuilder builder, int Num) { builder.AddInt(1, Num, 0); }
  public static void AddRepeat(FlatBufferBuilder builder, int Repeat) { builder.AddInt(2, Repeat, 0); }
  public static void AddItemId(FlatBufferBuilder builder, VectorOffset ItemIdOffset) { builder.AddOffset(3, ItemIdOffset.Value, 0); }
  public static VectorOffset CreateItemIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeight(FlatBufferBuilder builder, VectorOffset WeightOffset) { builder.AddOffset(4, WeightOffset.Value, 0); }
  public static VectorOffset CreateWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWeightVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ItemDropRowData> EndItemDropRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ItemDropRowData>(o);
  }
};

public struct ItemDrop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ItemDrop GetRootAsItemDrop(ByteBuffer _bb) { return GetRootAsItemDrop(_bb, new ItemDrop()); }
  public static ItemDrop GetRootAsItemDrop(ByteBuffer _bb, ItemDrop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemDrop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ItemDropRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ItemDropRowData?)(new GameConfigs.ItemDropRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ItemDrop> CreateItemDrop(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemDrop.AddDatalist(builder, datalistOffset);
    return ItemDrop.EndItemDrop(builder);
  }

  public static void StartItemDrop(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ItemDropRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ItemDropRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ItemDrop> EndItemDrop(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ItemDrop>(o);
  }
  public static void FinishItemDropBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ItemDrop> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedItemDropBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ItemDrop> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
