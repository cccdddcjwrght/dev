// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ExchangeRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ExchangeRowData GetRootAsExchangeRowData(ByteBuffer _bb) { return GetRootAsExchangeRowData(_bb, new ExchangeRowData()); }
  public static ExchangeRowData GetRootAsExchangeRowData(ByteBuffer _bb, ExchangeRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExchangeRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ExchangeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ingredient { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Num { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.ExchangeRowData> CreateExchangeRowData(FlatBufferBuilder builder,
      int ExchangeId = 0,
      int Ingredient = 0,
      int Num = 0) {
    builder.StartTable(3);
    ExchangeRowData.AddNum(builder, Num);
    ExchangeRowData.AddIngredient(builder, Ingredient);
    ExchangeRowData.AddExchangeId(builder, ExchangeId);
    return ExchangeRowData.EndExchangeRowData(builder);
  }

  public static void StartExchangeRowData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddExchangeId(FlatBufferBuilder builder, int ExchangeId) { builder.AddInt(0, ExchangeId, 0); }
  public static void AddIngredient(FlatBufferBuilder builder, int Ingredient) { builder.AddInt(1, Ingredient, 0); }
  public static void AddNum(FlatBufferBuilder builder, int Num) { builder.AddInt(2, Num, 0); }
  public static Offset<GameConfigs.ExchangeRowData> EndExchangeRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ExchangeRowData>(o);
  }
};

public struct Exchange : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Exchange GetRootAsExchange(ByteBuffer _bb) { return GetRootAsExchange(_bb, new Exchange()); }
  public static Exchange GetRootAsExchange(ByteBuffer _bb, Exchange obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Exchange __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ExchangeRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ExchangeRowData?)(new GameConfigs.ExchangeRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Exchange> CreateExchange(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Exchange.AddDatalist(builder, datalistOffset);
    return Exchange.EndExchange(builder);
  }

  public static void StartExchange(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ExchangeRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ExchangeRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Exchange> EndExchange(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Exchange>(o);
  }
  public static void FinishExchangeBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Exchange> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedExchangeBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Exchange> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
