// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct languageRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static languageRowData GetRootAslanguageRowData(ByteBuffer _bb) { return GetRootAslanguageRowData(_bb, new languageRowData()); }
  public static languageRowData GetRootAslanguageRowData(ByteBuffer _bb, languageRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public languageRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string DisplayName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDisplayNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDisplayNameArray() { return __p.__vector_as_array<byte>(6); }
  public string DefaultFont { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDefaultFontBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDefaultFontBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDefaultFontArray() { return __p.__vector_as_array<byte>(8); }
  public string OtherFont { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOtherFontBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetOtherFontBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetOtherFontArray() { return __p.__vector_as_array<byte>(10); }
  public string LanguageText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLanguageTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLanguageTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLanguageTextArray() { return __p.__vector_as_array<byte>(12); }
  public string BranchName { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBranchNameBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBranchNameBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBranchNameArray() { return __p.__vector_as_array<byte>(14); }
  public string TableName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTableNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTableNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTableNameArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<GameConfigs.languageRowData> CreatelanguageRowData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset displayNameOffset = default(StringOffset),
      StringOffset defaultFontOffset = default(StringOffset),
      StringOffset otherFontOffset = default(StringOffset),
      StringOffset languageTextOffset = default(StringOffset),
      StringOffset branchNameOffset = default(StringOffset),
      StringOffset tableNameOffset = default(StringOffset)) {
    builder.StartTable(7);
    languageRowData.AddTableName(builder, tableNameOffset);
    languageRowData.AddBranchName(builder, branchNameOffset);
    languageRowData.AddLanguageText(builder, languageTextOffset);
    languageRowData.AddOtherFont(builder, otherFontOffset);
    languageRowData.AddDefaultFont(builder, defaultFontOffset);
    languageRowData.AddDisplayName(builder, displayNameOffset);
    languageRowData.AddName(builder, nameOffset);
    return languageRowData.EndlanguageRowData(builder);
  }

  public static void StartlanguageRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDisplayName(FlatBufferBuilder builder, StringOffset displayNameOffset) { builder.AddOffset(1, displayNameOffset.Value, 0); }
  public static void AddDefaultFont(FlatBufferBuilder builder, StringOffset defaultFontOffset) { builder.AddOffset(2, defaultFontOffset.Value, 0); }
  public static void AddOtherFont(FlatBufferBuilder builder, StringOffset otherFontOffset) { builder.AddOffset(3, otherFontOffset.Value, 0); }
  public static void AddLanguageText(FlatBufferBuilder builder, StringOffset languageTextOffset) { builder.AddOffset(4, languageTextOffset.Value, 0); }
  public static void AddBranchName(FlatBufferBuilder builder, StringOffset branchNameOffset) { builder.AddOffset(5, branchNameOffset.Value, 0); }
  public static void AddTableName(FlatBufferBuilder builder, StringOffset tableNameOffset) { builder.AddOffset(6, tableNameOffset.Value, 0); }
  public static Offset<GameConfigs.languageRowData> EndlanguageRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.languageRowData>(o);
  }
};

public struct language : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static language GetRootAslanguage(ByteBuffer _bb) { return GetRootAslanguage(_bb, new language()); }
  public static language GetRootAslanguage(ByteBuffer _bb, language obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public language __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.languageRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.languageRowData?)(new GameConfigs.languageRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.language> Createlanguage(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    language.AddDatalist(builder, datalistOffset);
    return language.Endlanguage(builder);
  }

  public static void Startlanguage(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.languageRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.languageRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.language> Endlanguage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.language>(o);
  }
  public static void FinishlanguageBuffer(FlatBufferBuilder builder, Offset<GameConfigs.language> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedlanguageBuffer(FlatBufferBuilder builder, Offset<GameConfigs.language> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
