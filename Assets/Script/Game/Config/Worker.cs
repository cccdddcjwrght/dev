// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct WorkerRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static WorkerRowData GetRootAsWorkerRowData(ByteBuffer _bb) { return GetRootAsWorkerRowData(_bb, new WorkerRowData()); }
  public static WorkerRowData GetRootAsWorkerRowData(ByteBuffer _bb, WorkerRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorkerRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RoleId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Buff { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Default { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Range(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RangeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRangeBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetRangeBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetRangeArray() { return __p.__vector_as_array<int>(14); }
  public float LevelRatio { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Reward(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetRewardBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetRewardArray() { return __p.__vector_as_array<int>(18); }
  public int Unlock { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.WorkerRowData> CreateWorkerRowData(FlatBufferBuilder builder,
      int Id = 0,
      int RoleType = 0,
      int RoleId = 0,
      int Buff = 0,
      int Default = 0,
      VectorOffset RangeOffset = default(VectorOffset),
      float LevelRatio = 0.0f,
      VectorOffset RewardOffset = default(VectorOffset),
      int Unlock = 0) {
    builder.StartTable(9);
    WorkerRowData.AddUnlock(builder, Unlock);
    WorkerRowData.AddReward(builder, RewardOffset);
    WorkerRowData.AddLevelRatio(builder, LevelRatio);
    WorkerRowData.AddRange(builder, RangeOffset);
    WorkerRowData.AddDefault(builder, Default);
    WorkerRowData.AddBuff(builder, Buff);
    WorkerRowData.AddRoleId(builder, RoleId);
    WorkerRowData.AddRoleType(builder, RoleType);
    WorkerRowData.AddId(builder, Id);
    return WorkerRowData.EndWorkerRowData(builder);
  }

  public static void StartWorkerRowData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddRoleType(FlatBufferBuilder builder, int RoleType) { builder.AddInt(1, RoleType, 0); }
  public static void AddRoleId(FlatBufferBuilder builder, int RoleId) { builder.AddInt(2, RoleId, 0); }
  public static void AddBuff(FlatBufferBuilder builder, int Buff) { builder.AddInt(3, Buff, 0); }
  public static void AddDefault(FlatBufferBuilder builder, int Default) { builder.AddInt(4, Default, 0); }
  public static void AddRange(FlatBufferBuilder builder, VectorOffset RangeOffset) { builder.AddOffset(5, RangeOffset.Value, 0); }
  public static VectorOffset CreateRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLevelRatio(FlatBufferBuilder builder, float LevelRatio) { builder.AddFloat(6, LevelRatio, 0.0f); }
  public static void AddReward(FlatBufferBuilder builder, VectorOffset RewardOffset) { builder.AddOffset(7, RewardOffset.Value, 0); }
  public static VectorOffset CreateRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnlock(FlatBufferBuilder builder, int Unlock) { builder.AddInt(8, Unlock, 0); }
  public static Offset<GameConfigs.WorkerRowData> EndWorkerRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.WorkerRowData>(o);
  }
};

public struct Worker : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Worker GetRootAsWorker(ByteBuffer _bb) { return GetRootAsWorker(_bb, new Worker()); }
  public static Worker GetRootAsWorker(ByteBuffer _bb, Worker obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Worker __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.WorkerRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.WorkerRowData?)(new GameConfigs.WorkerRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Worker> CreateWorker(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Worker.AddDatalist(builder, datalistOffset);
    return Worker.EndWorker(builder);
  }

  public static void StartWorker(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.WorkerRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.WorkerRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Worker> EndWorker(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Worker>(o);
  }
  public static void FinishWorkerBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Worker> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWorkerBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Worker> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
