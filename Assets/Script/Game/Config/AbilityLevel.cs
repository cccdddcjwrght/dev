// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AbilityLevelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AbilityLevelRowData GetRootAsAbilityLevelRowData(ByteBuffer _bb) { return GetRootAsAbilityLevelRowData(_bb, new AbilityLevelRowData()); }
  public static AbilityLevelRowData GetRootAsAbilityLevelRowData(ByteBuffer _bb, AbilityLevelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbilityLevelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int VaultLevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCostBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetCostBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetCostArray() { return __p.__vector_as_array<int>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Value { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.AbilityLevelRowData> CreateAbilityLevelRowData(FlatBufferBuilder builder,
      int Id = 0,
      int VaultLevel = 0,
      VectorOffset CostOffset = default(VectorOffset),
      int Type = 0,
      int Value = 0) {
    builder.StartTable(5);
    AbilityLevelRowData.AddValue(builder, Value);
    AbilityLevelRowData.AddType(builder, Type);
    AbilityLevelRowData.AddCost(builder, CostOffset);
    AbilityLevelRowData.AddVaultLevel(builder, VaultLevel);
    AbilityLevelRowData.AddId(builder, Id);
    return AbilityLevelRowData.EndAbilityLevelRowData(builder);
  }

  public static void StartAbilityLevelRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddVaultLevel(FlatBufferBuilder builder, int VaultLevel) { builder.AddInt(1, VaultLevel, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset CostOffset) { builder.AddOffset(2, CostOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(3, Type, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(4, Value, 0); }
  public static Offset<GameConfigs.AbilityLevelRowData> EndAbilityLevelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.AbilityLevelRowData>(o);
  }
};

public struct AbilityLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AbilityLevel GetRootAsAbilityLevel(ByteBuffer _bb) { return GetRootAsAbilityLevel(_bb, new AbilityLevel()); }
  public static AbilityLevel GetRootAsAbilityLevel(ByteBuffer _bb, AbilityLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbilityLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.AbilityLevelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.AbilityLevelRowData?)(new GameConfigs.AbilityLevelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.AbilityLevel> CreateAbilityLevel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AbilityLevel.AddDatalist(builder, datalistOffset);
    return AbilityLevel.EndAbilityLevel(builder);
  }

  public static void StartAbilityLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.AbilityLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.AbilityLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.AbilityLevel> EndAbilityLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.AbilityLevel>(o);
  }
  public static void FinishAbilityLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.AbilityLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAbilityLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.AbilityLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
