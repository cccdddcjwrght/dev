// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MerchantRewardRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MerchantRewardRowData GetRootAsMerchantRewardRowData(ByteBuffer _bb) { return GetRootAsMerchantRewardRowData(_bb, new MerchantRewardRowData()); }
  public static MerchantRewardRowData GetRootAsMerchantRewardRowData(ByteBuffer _bb, MerchantRewardRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MerchantRewardRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Group { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupShowMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemIdBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetItemIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetItemIdArray() { return __p.__vector_as_array<int>(12); }
  public int Weight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCostBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetCostBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetCostArray() { return __p.__vector_as_array<int>(16); }

  public static Offset<GameConfigs.MerchantRewardRowData> CreateMerchantRewardRowData(FlatBufferBuilder builder,
      int Id = 0,
      int TypeValue = 0,
      int Group = 0,
      int GroupShowMax = 0,
      VectorOffset ItemIdOffset = default(VectorOffset),
      int Weight = 0,
      VectorOffset CostOffset = default(VectorOffset)) {
    builder.StartTable(7);
    MerchantRewardRowData.AddCost(builder, CostOffset);
    MerchantRewardRowData.AddWeight(builder, Weight);
    MerchantRewardRowData.AddItemId(builder, ItemIdOffset);
    MerchantRewardRowData.AddGroupShowMax(builder, GroupShowMax);
    MerchantRewardRowData.AddGroup(builder, Group);
    MerchantRewardRowData.AddTypeValue(builder, TypeValue);
    MerchantRewardRowData.AddId(builder, Id);
    return MerchantRewardRowData.EndMerchantRewardRowData(builder);
  }

  public static void StartMerchantRewardRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddTypeValue(FlatBufferBuilder builder, int TypeValue) { builder.AddInt(1, TypeValue, 0); }
  public static void AddGroup(FlatBufferBuilder builder, int Group) { builder.AddInt(2, Group, 0); }
  public static void AddGroupShowMax(FlatBufferBuilder builder, int GroupShowMax) { builder.AddInt(3, GroupShowMax, 0); }
  public static void AddItemId(FlatBufferBuilder builder, VectorOffset ItemIdOffset) { builder.AddOffset(4, ItemIdOffset.Value, 0); }
  public static VectorOffset CreateItemIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(5, Weight, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset CostOffset) { builder.AddOffset(6, CostOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.MerchantRewardRowData> EndMerchantRewardRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.MerchantRewardRowData>(o);
  }
};

public struct MerchantReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MerchantReward GetRootAsMerchantReward(ByteBuffer _bb) { return GetRootAsMerchantReward(_bb, new MerchantReward()); }
  public static MerchantReward GetRootAsMerchantReward(ByteBuffer _bb, MerchantReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MerchantReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.MerchantRewardRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.MerchantRewardRowData?)(new GameConfigs.MerchantRewardRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.MerchantReward> CreateMerchantReward(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MerchantReward.AddDatalist(builder, datalistOffset);
    return MerchantReward.EndMerchantReward(builder);
  }

  public static void StartMerchantReward(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.MerchantRewardRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.MerchantRewardRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.MerchantReward> EndMerchantReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.MerchantReward>(o);
  }
  public static void FinishMerchantRewardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.MerchantReward> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMerchantRewardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.MerchantReward> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
