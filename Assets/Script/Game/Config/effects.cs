// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct effectsRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static effectsRowData GetRootAseffectsRowData(ByteBuffer _bb) { return GetRootAseffectsRowData(_bb, new effectsRowData()); }
  public static effectsRowData GetRootAseffectsRowData(ByteBuffer _bb, effectsRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public effectsRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Prefab { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPrefabBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPrefabArray() { return __p.__vector_as_array<byte>(6); }
  public int AutoFinish { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Duration { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Loop { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Position(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int PositionLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetPositionBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetPositionArray() { return __p.__vector_as_array<float>(14); }
  public float Scale(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ScaleLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetScaleBytes() { return __p.__vector_as_span<float>(16, 4); }
#else
  public ArraySegment<byte>? GetScaleBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public float[] GetScaleArray() { return __p.__vector_as_array<float>(16); }
  public float EulerAngle(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int EulerAngleLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetEulerAngleBytes() { return __p.__vector_as_span<float>(18, 4); }
#else
  public ArraySegment<byte>? GetEulerAngleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public float[] GetEulerAngleArray() { return __p.__vector_as_array<float>(18); }

  public static Offset<GameConfigs.effectsRowData> CreateeffectsRowData(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset PrefabOffset = default(StringOffset),
      int AutoFinish = 0,
      float Duration = 0.0f,
      int loop = 0,
      VectorOffset PositionOffset = default(VectorOffset),
      VectorOffset ScaleOffset = default(VectorOffset),
      VectorOffset EulerAngleOffset = default(VectorOffset)) {
    builder.StartTable(8);
    effectsRowData.AddEulerAngle(builder, EulerAngleOffset);
    effectsRowData.AddScale(builder, ScaleOffset);
    effectsRowData.AddPosition(builder, PositionOffset);
    effectsRowData.AddLoop(builder, loop);
    effectsRowData.AddDuration(builder, Duration);
    effectsRowData.AddAutoFinish(builder, AutoFinish);
    effectsRowData.AddPrefab(builder, PrefabOffset);
    effectsRowData.AddID(builder, ID);
    return effectsRowData.EndeffectsRowData(builder);
  }

  public static void StarteffectsRowData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddPrefab(FlatBufferBuilder builder, StringOffset PrefabOffset) { builder.AddOffset(1, PrefabOffset.Value, 0); }
  public static void AddAutoFinish(FlatBufferBuilder builder, int AutoFinish) { builder.AddInt(2, AutoFinish, 0); }
  public static void AddDuration(FlatBufferBuilder builder, float Duration) { builder.AddFloat(3, Duration, 0.0f); }
  public static void AddLoop(FlatBufferBuilder builder, int loop) { builder.AddInt(4, loop, 0); }
  public static void AddPosition(FlatBufferBuilder builder, VectorOffset PositionOffset) { builder.AddOffset(5, PositionOffset.Value, 0); }
  public static VectorOffset CreatePositionVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScale(FlatBufferBuilder builder, VectorOffset ScaleOffset) { builder.AddOffset(6, ScaleOffset.Value, 0); }
  public static VectorOffset CreateScaleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScaleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEulerAngle(FlatBufferBuilder builder, VectorOffset EulerAngleOffset) { builder.AddOffset(7, EulerAngleOffset.Value, 0); }
  public static VectorOffset CreateEulerAngleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEulerAngleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEulerAngleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.effectsRowData> EndeffectsRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.effectsRowData>(o);
  }
};

public struct effects : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static effects GetRootAseffects(ByteBuffer _bb) { return GetRootAseffects(_bb, new effects()); }
  public static effects GetRootAseffects(ByteBuffer _bb, effects obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public effects __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.effectsRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.effectsRowData?)(new GameConfigs.effectsRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.effects> Createeffects(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    effects.AddDatalist(builder, datalistOffset);
    return effects.Endeffects(builder);
  }

  public static void Starteffects(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.effectsRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.effectsRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.effects> Endeffects(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.effects>(o);
  }
  public static void FinisheffectsBuffer(FlatBufferBuilder builder, Offset<GameConfigs.effects> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedeffectsBuffer(FlatBufferBuilder builder, Offset<GameConfigs.effects> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
