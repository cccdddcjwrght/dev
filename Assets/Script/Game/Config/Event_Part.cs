// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Event_PartRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Event_PartRowData GetRootAsEvent_PartRowData(ByteBuffer _bb) { return GetRootAsEvent_PartRowData(_bb, new Event_PartRowData()); }
  public static Event_PartRowData GetRootAsEvent_PartRowData(ByteBuffer _bb, Event_PartRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event_PartRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PartId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PartSize { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialEventId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEventIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEventIdBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetSpecialEventIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetSpecialEventIdArray() { return __p.__vector_as_array<int>(8); }
  public int NormalEventId(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NormalEventIdLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNormalEventIdBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetNormalEventIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetNormalEventIdArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<GameConfigs.Event_PartRowData> CreateEvent_PartRowData(FlatBufferBuilder builder,
      int PartId = 0,
      int PartSize = 0,
      VectorOffset SpecialEventIdOffset = default(VectorOffset),
      VectorOffset NormalEventIdOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Event_PartRowData.AddNormalEventId(builder, NormalEventIdOffset);
    Event_PartRowData.AddSpecialEventId(builder, SpecialEventIdOffset);
    Event_PartRowData.AddPartSize(builder, PartSize);
    Event_PartRowData.AddPartId(builder, PartId);
    return Event_PartRowData.EndEvent_PartRowData(builder);
  }

  public static void StartEvent_PartRowData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPartId(FlatBufferBuilder builder, int PartId) { builder.AddInt(0, PartId, 0); }
  public static void AddPartSize(FlatBufferBuilder builder, int PartSize) { builder.AddInt(1, PartSize, 0); }
  public static void AddSpecialEventId(FlatBufferBuilder builder, VectorOffset SpecialEventIdOffset) { builder.AddOffset(2, SpecialEventIdOffset.Value, 0); }
  public static VectorOffset CreateSpecialEventIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEventIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSpecialEventIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNormalEventId(FlatBufferBuilder builder, VectorOffset NormalEventIdOffset) { builder.AddOffset(3, NormalEventIdOffset.Value, 0); }
  public static VectorOffset CreateNormalEventIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNormalEventIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNormalEventIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Event_PartRowData> EndEvent_PartRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Event_PartRowData>(o);
  }
};

public struct Event_Part : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Event_Part GetRootAsEvent_Part(ByteBuffer _bb) { return GetRootAsEvent_Part(_bb, new Event_Part()); }
  public static Event_Part GetRootAsEvent_Part(ByteBuffer _bb, Event_Part obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event_Part __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Event_PartRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Event_PartRowData?)(new GameConfigs.Event_PartRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Event_Part> CreateEvent_Part(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Event_Part.AddDatalist(builder, datalistOffset);
    return Event_Part.EndEvent_Part(builder);
  }

  public static void StartEvent_Part(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Event_PartRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Event_PartRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Event_Part> EndEvent_Part(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Event_Part>(o);
  }
  public static void FinishEvent_PartBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Event_Part> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEvent_PartBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Event_Part> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
