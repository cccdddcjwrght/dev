// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Travel_EventRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Travel_EventRowData GetRootAsTravel_EventRowData(ByteBuffer _bb) { return GetRootAsTravel_EventRowData(_bb, new Travel_EventRowData()); }
  public static Travel_EventRowData GetRootAsTravel_EventRowData(ByteBuffer _bb, Travel_EventRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Travel_EventRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GridPathId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Weight { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventNum(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EventNumLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEventNumBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetEventNumBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetEventNumArray() { return __p.__vector_as_array<int>(10); }
  public int EventGridId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EventGridIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEventGridIdBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetEventGridIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetEventGridIdArray() { return __p.__vector_as_array<int>(12); }
  public int EventWeight(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EventWeightLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEventWeightBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetEventWeightBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetEventWeightArray() { return __p.__vector_as_array<int>(14); }

  public static Offset<GameConfigs.Travel_EventRowData> CreateTravel_EventRowData(FlatBufferBuilder builder,
      int Id = 0,
      int GridPathId = 0,
      int Weight = 0,
      VectorOffset EventNumOffset = default(VectorOffset),
      VectorOffset EventGridIdOffset = default(VectorOffset),
      VectorOffset EventWeightOffset = default(VectorOffset)) {
    builder.StartTable(6);
    Travel_EventRowData.AddEventWeight(builder, EventWeightOffset);
    Travel_EventRowData.AddEventGridId(builder, EventGridIdOffset);
    Travel_EventRowData.AddEventNum(builder, EventNumOffset);
    Travel_EventRowData.AddWeight(builder, Weight);
    Travel_EventRowData.AddGridPathId(builder, GridPathId);
    Travel_EventRowData.AddId(builder, Id);
    return Travel_EventRowData.EndTravel_EventRowData(builder);
  }

  public static void StartTravel_EventRowData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddGridPathId(FlatBufferBuilder builder, int GridPathId) { builder.AddInt(1, GridPathId, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(2, Weight, 0); }
  public static void AddEventNum(FlatBufferBuilder builder, VectorOffset EventNumOffset) { builder.AddOffset(3, EventNumOffset.Value, 0); }
  public static VectorOffset CreateEventNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventNumVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEventGridId(FlatBufferBuilder builder, VectorOffset EventGridIdOffset) { builder.AddOffset(4, EventGridIdOffset.Value, 0); }
  public static VectorOffset CreateEventGridIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventGridIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventGridIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEventWeight(FlatBufferBuilder builder, VectorOffset EventWeightOffset) { builder.AddOffset(5, EventWeightOffset.Value, 0); }
  public static VectorOffset CreateEventWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventWeightVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Travel_EventRowData> EndTravel_EventRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Travel_EventRowData>(o);
  }
};

public struct Travel_Event : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Travel_Event GetRootAsTravel_Event(ByteBuffer _bb) { return GetRootAsTravel_Event(_bb, new Travel_Event()); }
  public static Travel_Event GetRootAsTravel_Event(ByteBuffer _bb, Travel_Event obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Travel_Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Travel_EventRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Travel_EventRowData?)(new GameConfigs.Travel_EventRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Travel_Event> CreateTravel_Event(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Travel_Event.AddDatalist(builder, datalistOffset);
    return Travel_Event.EndTravel_Event(builder);
  }

  public static void StartTravel_Event(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Travel_EventRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Travel_EventRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Travel_Event> EndTravel_Event(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Travel_Event>(o);
  }
  public static void FinishTravel_EventBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Travel_Event> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTravel_EventBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Travel_Event> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
