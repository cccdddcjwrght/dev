// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct GridRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static GridRowData GetRootAsGridRowData(ByteBuffer _bb) { return GetRootAsGridRowData(_bb, new GridRowData()); }
  public static GridRowData GetRootAsGridRowData(ByteBuffer _bb, GridRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GridRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GridId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BoardArea { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Position(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PositionLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPositionBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetPositionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetPositionArray() { return __p.__vector_as_array<int>(8); }
  public int UnlockArea { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockPosition(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UnlockPositionLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUnlockPositionBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetUnlockPositionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetUnlockPositionArray() { return __p.__vector_as_array<int>(12); }
  public int GridSkin { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventBuildId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BaseReward(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BaseRewardLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBaseRewardBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetBaseRewardBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetBaseRewardArray() { return __p.__vector_as_array<int>(20); }
  public int TravelEventType { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TravelEventBuildId { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.GridRowData> CreateGridRowData(FlatBufferBuilder builder,
      int GridId = 0,
      int BoardArea = 0,
      VectorOffset PositionOffset = default(VectorOffset),
      int UnlockArea = 0,
      VectorOffset UnlockPositionOffset = default(VectorOffset),
      int GridSkin = 0,
      int EventType = 0,
      int EventBuildId = 0,
      VectorOffset BaseRewardOffset = default(VectorOffset),
      int TravelEventType = 0,
      int TravelEventBuildId = 0) {
    builder.StartTable(11);
    GridRowData.AddTravelEventBuildId(builder, TravelEventBuildId);
    GridRowData.AddTravelEventType(builder, TravelEventType);
    GridRowData.AddBaseReward(builder, BaseRewardOffset);
    GridRowData.AddEventBuildId(builder, EventBuildId);
    GridRowData.AddEventType(builder, EventType);
    GridRowData.AddGridSkin(builder, GridSkin);
    GridRowData.AddUnlockPosition(builder, UnlockPositionOffset);
    GridRowData.AddUnlockArea(builder, UnlockArea);
    GridRowData.AddPosition(builder, PositionOffset);
    GridRowData.AddBoardArea(builder, BoardArea);
    GridRowData.AddGridId(builder, GridId);
    return GridRowData.EndGridRowData(builder);
  }

  public static void StartGridRowData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddGridId(FlatBufferBuilder builder, int GridId) { builder.AddInt(0, GridId, 0); }
  public static void AddBoardArea(FlatBufferBuilder builder, int BoardArea) { builder.AddInt(1, BoardArea, 0); }
  public static void AddPosition(FlatBufferBuilder builder, VectorOffset PositionOffset) { builder.AddOffset(2, PositionOffset.Value, 0); }
  public static VectorOffset CreatePositionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePositionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUnlockArea(FlatBufferBuilder builder, int UnlockArea) { builder.AddInt(3, UnlockArea, 0); }
  public static void AddUnlockPosition(FlatBufferBuilder builder, VectorOffset UnlockPositionOffset) { builder.AddOffset(4, UnlockPositionOffset.Value, 0); }
  public static VectorOffset CreateUnlockPositionVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnlockPositionVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUnlockPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGridSkin(FlatBufferBuilder builder, int GridSkin) { builder.AddInt(5, GridSkin, 0); }
  public static void AddEventType(FlatBufferBuilder builder, int EventType) { builder.AddInt(6, EventType, 0); }
  public static void AddEventBuildId(FlatBufferBuilder builder, int EventBuildId) { builder.AddInt(7, EventBuildId, 0); }
  public static void AddBaseReward(FlatBufferBuilder builder, VectorOffset BaseRewardOffset) { builder.AddOffset(8, BaseRewardOffset.Value, 0); }
  public static VectorOffset CreateBaseRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBaseRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBaseRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTravelEventType(FlatBufferBuilder builder, int TravelEventType) { builder.AddInt(9, TravelEventType, 0); }
  public static void AddTravelEventBuildId(FlatBufferBuilder builder, int TravelEventBuildId) { builder.AddInt(10, TravelEventBuildId, 0); }
  public static Offset<GameConfigs.GridRowData> EndGridRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.GridRowData>(o);
  }
};

public struct Grid : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Grid GetRootAsGrid(ByteBuffer _bb) { return GetRootAsGrid(_bb, new Grid()); }
  public static Grid GetRootAsGrid(ByteBuffer _bb, Grid obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Grid __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.GridRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.GridRowData?)(new GameConfigs.GridRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Grid> CreateGrid(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Grid.AddDatalist(builder, datalistOffset);
    return Grid.EndGrid(builder);
  }

  public static void StartGrid(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.GridRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.GridRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Grid> EndGrid(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Grid>(o);
  }
  public static void FinishGridBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Grid> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGridBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Grid> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
