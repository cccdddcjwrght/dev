// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EvolutionRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EvolutionRowData GetRootAsEvolutionRowData(ByteBuffer _bb) { return GetRootAsEvolutionRowData(_bb, new EvolutionRowData()); }
  public static EvolutionRowData GetRootAsEvolutionRowData(ByteBuffer _bb, EvolutionRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EvolutionRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BasicEvolutionTime(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BasicEvolutionTimeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBasicEvolutionTimeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetBasicEvolutionTimeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetBasicEvolutionTimeArray() { return __p.__vector_as_array<int>(6); }
  public int BadgeId(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BadgeIdLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBadgeIdBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetBadgeIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetBadgeIdArray() { return __p.__vector_as_array<int>(8); }
  public int BadgeNum(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BadgeNumLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBadgeNumBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetBadgeNumBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetBadgeNumArray() { return __p.__vector_as_array<int>(10); }
  public int BasicEvolutionRate(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BasicEvolutionRateLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBasicEvolutionRateBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetBasicEvolutionRateBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetBasicEvolutionRateArray() { return __p.__vector_as_array<int>(12); }
  public int SpecialEvolutionNeed(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEvolutionNeedLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEvolutionNeedBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetSpecialEvolutionNeedBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetSpecialEvolutionNeedArray() { return __p.__vector_as_array<int>(14); }
  public int SpecialEvolutionValue(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SpecialEvolutionValueLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetSpecialEvolutionValueBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetSpecialEvolutionValueBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetSpecialEvolutionValueArray() { return __p.__vector_as_array<int>(16); }
  public int ReleaseReward { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EvolutionReward { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialEvolutionTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpecialEvolutionReward { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.EvolutionRowData> CreateEvolutionRowData(FlatBufferBuilder builder,
      int Id = 0,
      VectorOffset BasicEvolutionTimeOffset = default(VectorOffset),
      VectorOffset BadgeIdOffset = default(VectorOffset),
      VectorOffset BadgeNumOffset = default(VectorOffset),
      VectorOffset BasicEvolutionRateOffset = default(VectorOffset),
      VectorOffset SpecialEvolutionNeedOffset = default(VectorOffset),
      VectorOffset SpecialEvolutionValueOffset = default(VectorOffset),
      int ReleaseReward = 0,
      int EvolutionReward = 0,
      int SpecialEvolutionTime = 0,
      int SpecialEvolutionReward = 0) {
    builder.StartTable(11);
    EvolutionRowData.AddSpecialEvolutionReward(builder, SpecialEvolutionReward);
    EvolutionRowData.AddSpecialEvolutionTime(builder, SpecialEvolutionTime);
    EvolutionRowData.AddEvolutionReward(builder, EvolutionReward);
    EvolutionRowData.AddReleaseReward(builder, ReleaseReward);
    EvolutionRowData.AddSpecialEvolutionValue(builder, SpecialEvolutionValueOffset);
    EvolutionRowData.AddSpecialEvolutionNeed(builder, SpecialEvolutionNeedOffset);
    EvolutionRowData.AddBasicEvolutionRate(builder, BasicEvolutionRateOffset);
    EvolutionRowData.AddBadgeNum(builder, BadgeNumOffset);
    EvolutionRowData.AddBadgeId(builder, BadgeIdOffset);
    EvolutionRowData.AddBasicEvolutionTime(builder, BasicEvolutionTimeOffset);
    EvolutionRowData.AddId(builder, Id);
    return EvolutionRowData.EndEvolutionRowData(builder);
  }

  public static void StartEvolutionRowData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddBasicEvolutionTime(FlatBufferBuilder builder, VectorOffset BasicEvolutionTimeOffset) { builder.AddOffset(1, BasicEvolutionTimeOffset.Value, 0); }
  public static VectorOffset CreateBasicEvolutionTimeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBasicEvolutionTimeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBasicEvolutionTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBadgeId(FlatBufferBuilder builder, VectorOffset BadgeIdOffset) { builder.AddOffset(2, BadgeIdOffset.Value, 0); }
  public static VectorOffset CreateBadgeIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBadgeIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBadgeIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBadgeNum(FlatBufferBuilder builder, VectorOffset BadgeNumOffset) { builder.AddOffset(3, BadgeNumOffset.Value, 0); }
  public static VectorOffset CreateBadgeNumVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBadgeNumVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBadgeNumVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBasicEvolutionRate(FlatBufferBuilder builder, VectorOffset BasicEvolutionRateOffset) { builder.AddOffset(4, BasicEvolutionRateOffset.Value, 0); }
  public static VectorOffset CreateBasicEvolutionRateVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBasicEvolutionRateVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBasicEvolutionRateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialEvolutionNeed(FlatBufferBuilder builder, VectorOffset SpecialEvolutionNeedOffset) { builder.AddOffset(5, SpecialEvolutionNeedOffset.Value, 0); }
  public static VectorOffset CreateSpecialEvolutionNeedVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEvolutionNeedVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSpecialEvolutionNeedVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSpecialEvolutionValue(FlatBufferBuilder builder, VectorOffset SpecialEvolutionValueOffset) { builder.AddOffset(6, SpecialEvolutionValueOffset.Value, 0); }
  public static VectorOffset CreateSpecialEvolutionValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSpecialEvolutionValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSpecialEvolutionValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReleaseReward(FlatBufferBuilder builder, int ReleaseReward) { builder.AddInt(7, ReleaseReward, 0); }
  public static void AddEvolutionReward(FlatBufferBuilder builder, int EvolutionReward) { builder.AddInt(8, EvolutionReward, 0); }
  public static void AddSpecialEvolutionTime(FlatBufferBuilder builder, int SpecialEvolutionTime) { builder.AddInt(9, SpecialEvolutionTime, 0); }
  public static void AddSpecialEvolutionReward(FlatBufferBuilder builder, int SpecialEvolutionReward) { builder.AddInt(10, SpecialEvolutionReward, 0); }
  public static Offset<GameConfigs.EvolutionRowData> EndEvolutionRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.EvolutionRowData>(o);
  }
};

public struct Evolution : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Evolution GetRootAsEvolution(ByteBuffer _bb) { return GetRootAsEvolution(_bb, new Evolution()); }
  public static Evolution GetRootAsEvolution(ByteBuffer _bb, Evolution obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Evolution __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.EvolutionRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.EvolutionRowData?)(new GameConfigs.EvolutionRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Evolution> CreateEvolution(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Evolution.AddDatalist(builder, datalistOffset);
    return Evolution.EndEvolution(builder);
  }

  public static void StartEvolution(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.EvolutionRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.EvolutionRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Evolution> EndEvolution(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Evolution>(o);
  }
  public static void FinishEvolutionBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Evolution> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEvolutionBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Evolution> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
