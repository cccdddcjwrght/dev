// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct fontsRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static fontsRowData GetRootAsfontsRowData(ByteBuffer _bb) { return GetRootAsfontsRowData(_bb, new fontsRowData()); }
  public static fontsRowData GetRootAsfontsRowData(ByteBuffer _bb, fontsRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public fontsRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string DisplayName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDisplayNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDisplayNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDisplayNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Path { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GameConfigs.fontsRowData> CreatefontsRowData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset displayNameOffset = default(StringOffset),
      StringOffset pathOffset = default(StringOffset)) {
    builder.StartTable(3);
    fontsRowData.AddPath(builder, pathOffset);
    fontsRowData.AddDisplayName(builder, displayNameOffset);
    fontsRowData.AddName(builder, nameOffset);
    return fontsRowData.EndfontsRowData(builder);
  }

  public static void StartfontsRowData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDisplayName(FlatBufferBuilder builder, StringOffset displayNameOffset) { builder.AddOffset(1, displayNameOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(2, pathOffset.Value, 0); }
  public static Offset<GameConfigs.fontsRowData> EndfontsRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.fontsRowData>(o);
  }
};

public struct fonts : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static fonts GetRootAsfonts(ByteBuffer _bb) { return GetRootAsfonts(_bb, new fonts()); }
  public static fonts GetRootAsfonts(ByteBuffer _bb, fonts obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public fonts __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.fontsRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.fontsRowData?)(new GameConfigs.fontsRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.fonts> Createfonts(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    fonts.AddDatalist(builder, datalistOffset);
    return fonts.Endfonts(builder);
  }

  public static void Startfonts(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.fontsRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.fontsRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.fonts> Endfonts(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.fonts>(o);
  }
  public static void FinishfontsBuffer(FlatBufferBuilder builder, Offset<GameConfigs.fonts> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedfontsBuffer(FlatBufferBuilder builder, Offset<GameConfigs.fonts> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
