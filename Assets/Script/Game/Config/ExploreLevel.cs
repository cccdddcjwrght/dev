// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ExploreLevelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ExploreLevelRowData GetRootAsExploreLevelRowData(ByteBuffer _bb) { return GetRootAsExploreLevelRowData(_bb, new ExploreLevelRowData()); }
  public static ExploreLevelRowData GetRootAsExploreLevelRowData(ByteBuffer _bb, ExploreLevelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreLevelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Exp { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.ExploreLevelRowData> CreateExploreLevelRowData(FlatBufferBuilder builder,
      int Id = 0,
      int Exp = 0) {
    builder.StartTable(2);
    ExploreLevelRowData.AddExp(builder, Exp);
    ExploreLevelRowData.AddId(builder, Id);
    return ExploreLevelRowData.EndExploreLevelRowData(builder);
  }

  public static void StartExploreLevelRowData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddExp(FlatBufferBuilder builder, int Exp) { builder.AddInt(1, Exp, 0); }
  public static Offset<GameConfigs.ExploreLevelRowData> EndExploreLevelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ExploreLevelRowData>(o);
  }
};

public struct ExploreLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ExploreLevel GetRootAsExploreLevel(ByteBuffer _bb) { return GetRootAsExploreLevel(_bb, new ExploreLevel()); }
  public static ExploreLevel GetRootAsExploreLevel(ByteBuffer _bb, ExploreLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ExploreLevelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ExploreLevelRowData?)(new GameConfigs.ExploreLevelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ExploreLevel> CreateExploreLevel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ExploreLevel.AddDatalist(builder, datalistOffset);
    return ExploreLevel.EndExploreLevel(builder);
  }

  public static void StartExploreLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ExploreLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ExploreLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ExploreLevel> EndExploreLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ExploreLevel>(o);
  }
  public static void FinishExploreLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ExploreLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedExploreLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ExploreLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
