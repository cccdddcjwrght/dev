// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Build_VisitRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Build_VisitRowData GetRootAsBuild_VisitRowData(ByteBuffer _bb) { return GetRootAsBuild_VisitRowData(_bb, new Build_VisitRowData()); }
  public static Build_VisitRowData GetRootAsBuild_VisitRowData(ByteBuffer _bb, Build_VisitRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Build_VisitRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BoardId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuildLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuildRes { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuildResBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBuildResBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBuildResArray() { return __p.__vector_as_array<byte>(10); }
  public int Reward(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetRewardBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetRewardArray() { return __p.__vector_as_array<int>(12); }

  public static Offset<GameConfigs.Build_VisitRowData> CreateBuild_VisitRowData(FlatBufferBuilder builder,
      int Id = 0,
      int BoardId = 0,
      int BuildLevel = 0,
      StringOffset BuildResOffset = default(StringOffset),
      VectorOffset RewardOffset = default(VectorOffset)) {
    builder.StartTable(5);
    Build_VisitRowData.AddReward(builder, RewardOffset);
    Build_VisitRowData.AddBuildRes(builder, BuildResOffset);
    Build_VisitRowData.AddBuildLevel(builder, BuildLevel);
    Build_VisitRowData.AddBoardId(builder, BoardId);
    Build_VisitRowData.AddId(builder, Id);
    return Build_VisitRowData.EndBuild_VisitRowData(builder);
  }

  public static void StartBuild_VisitRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddBoardId(FlatBufferBuilder builder, int BoardId) { builder.AddInt(1, BoardId, 0); }
  public static void AddBuildLevel(FlatBufferBuilder builder, int BuildLevel) { builder.AddInt(2, BuildLevel, 0); }
  public static void AddBuildRes(FlatBufferBuilder builder, StringOffset BuildResOffset) { builder.AddOffset(3, BuildResOffset.Value, 0); }
  public static void AddReward(FlatBufferBuilder builder, VectorOffset RewardOffset) { builder.AddOffset(4, RewardOffset.Value, 0); }
  public static VectorOffset CreateRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Build_VisitRowData> EndBuild_VisitRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Build_VisitRowData>(o);
  }
};

public struct Build_Visit : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Build_Visit GetRootAsBuild_Visit(ByteBuffer _bb) { return GetRootAsBuild_Visit(_bb, new Build_Visit()); }
  public static Build_Visit GetRootAsBuild_Visit(ByteBuffer _bb, Build_Visit obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Build_Visit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Build_VisitRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Build_VisitRowData?)(new GameConfigs.Build_VisitRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Build_Visit> CreateBuild_Visit(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Build_Visit.AddDatalist(builder, datalistOffset);
    return Build_Visit.EndBuild_Visit(builder);
  }

  public static void StartBuild_Visit(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Build_VisitRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Build_VisitRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Build_Visit> EndBuild_Visit(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Build_Visit>(o);
  }
  public static void FinishBuild_VisitBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Build_Visit> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBuild_VisitBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Build_Visit> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
