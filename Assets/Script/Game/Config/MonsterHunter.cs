// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MonsterHunterRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MonsterHunterRowData GetRootAsMonsterHunterRowData(ByteBuffer _bb) { return GetRootAsMonsterHunterRowData(_bb, new MonsterHunterRowData()); }
  public static MonsterHunterRowData GetRootAsMonsterHunterRowData(ByteBuffer _bb, MonsterHunterRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterHunterRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Group { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BG { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBGBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetBGBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetBGArray() { return __p.__vector_as_array<byte>(8); }
  public string MonsterIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMonsterIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMonsterIconArray() { return __p.__vector_as_array<byte>(10); }
  public string MonsterRes { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMonsterResBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMonsterResBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMonsterResArray() { return __p.__vector_as_array<byte>(12); }
  public int MonsterHP { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KillReward1(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int KillReward1Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetKillReward1Bytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetKillReward1Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetKillReward1Array() { return __p.__vector_as_array<int>(16); }
  public int KillReward2(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int KillReward2Length { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetKillReward2Bytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetKillReward2Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetKillReward2Array() { return __p.__vector_as_array<int>(18); }
  public int KillReward3(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int KillReward3Length { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetKillReward3Bytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetKillReward3Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetKillReward3Array() { return __p.__vector_as_array<int>(20); }
  public int KillReward4(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int KillReward4Length { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetKillReward4Bytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetKillReward4Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetKillReward4Array() { return __p.__vector_as_array<int>(22); }
  public int MidHP1 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MidReward1(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MidReward1Length { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMidReward1Bytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetMidReward1Bytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetMidReward1Array() { return __p.__vector_as_array<int>(26); }
  public int MidHP2 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MidReward2(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MidReward2Length { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMidReward2Bytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetMidReward2Bytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetMidReward2Array() { return __p.__vector_as_array<int>(30); }

  public static Offset<GameConfigs.MonsterHunterRowData> CreateMonsterHunterRowData(FlatBufferBuilder builder,
      int Id = 0,
      int Group = 0,
      StringOffset BGOffset = default(StringOffset),
      StringOffset MonsterIconOffset = default(StringOffset),
      StringOffset MonsterResOffset = default(StringOffset),
      int MonsterHP = 0,
      VectorOffset KillReward1Offset = default(VectorOffset),
      VectorOffset KillReward2Offset = default(VectorOffset),
      VectorOffset KillReward3Offset = default(VectorOffset),
      VectorOffset KillReward4Offset = default(VectorOffset),
      int MidHP1 = 0,
      VectorOffset MidReward1Offset = default(VectorOffset),
      int MidHP2 = 0,
      VectorOffset MidReward2Offset = default(VectorOffset)) {
    builder.StartTable(14);
    MonsterHunterRowData.AddMidReward2(builder, MidReward2Offset);
    MonsterHunterRowData.AddMidHP2(builder, MidHP2);
    MonsterHunterRowData.AddMidReward1(builder, MidReward1Offset);
    MonsterHunterRowData.AddMidHP1(builder, MidHP1);
    MonsterHunterRowData.AddKillReward4(builder, KillReward4Offset);
    MonsterHunterRowData.AddKillReward3(builder, KillReward3Offset);
    MonsterHunterRowData.AddKillReward2(builder, KillReward2Offset);
    MonsterHunterRowData.AddKillReward1(builder, KillReward1Offset);
    MonsterHunterRowData.AddMonsterHP(builder, MonsterHP);
    MonsterHunterRowData.AddMonsterRes(builder, MonsterResOffset);
    MonsterHunterRowData.AddMonsterIcon(builder, MonsterIconOffset);
    MonsterHunterRowData.AddBG(builder, BGOffset);
    MonsterHunterRowData.AddGroup(builder, Group);
    MonsterHunterRowData.AddId(builder, Id);
    return MonsterHunterRowData.EndMonsterHunterRowData(builder);
  }

  public static void StartMonsterHunterRowData(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddGroup(FlatBufferBuilder builder, int Group) { builder.AddInt(1, Group, 0); }
  public static void AddBG(FlatBufferBuilder builder, StringOffset BGOffset) { builder.AddOffset(2, BGOffset.Value, 0); }
  public static void AddMonsterIcon(FlatBufferBuilder builder, StringOffset MonsterIconOffset) { builder.AddOffset(3, MonsterIconOffset.Value, 0); }
  public static void AddMonsterRes(FlatBufferBuilder builder, StringOffset MonsterResOffset) { builder.AddOffset(4, MonsterResOffset.Value, 0); }
  public static void AddMonsterHP(FlatBufferBuilder builder, int MonsterHP) { builder.AddInt(5, MonsterHP, 0); }
  public static void AddKillReward1(FlatBufferBuilder builder, VectorOffset KillReward1Offset) { builder.AddOffset(6, KillReward1Offset.Value, 0); }
  public static VectorOffset CreateKillReward1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKillReward1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKillReward1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKillReward2(FlatBufferBuilder builder, VectorOffset KillReward2Offset) { builder.AddOffset(7, KillReward2Offset.Value, 0); }
  public static VectorOffset CreateKillReward2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKillReward2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKillReward2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKillReward3(FlatBufferBuilder builder, VectorOffset KillReward3Offset) { builder.AddOffset(8, KillReward3Offset.Value, 0); }
  public static VectorOffset CreateKillReward3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKillReward3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKillReward3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddKillReward4(FlatBufferBuilder builder, VectorOffset KillReward4Offset) { builder.AddOffset(9, KillReward4Offset.Value, 0); }
  public static VectorOffset CreateKillReward4Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateKillReward4VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartKillReward4Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMidHP1(FlatBufferBuilder builder, int MidHP1) { builder.AddInt(10, MidHP1, 0); }
  public static void AddMidReward1(FlatBufferBuilder builder, VectorOffset MidReward1Offset) { builder.AddOffset(11, MidReward1Offset.Value, 0); }
  public static VectorOffset CreateMidReward1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMidReward1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMidReward1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMidHP2(FlatBufferBuilder builder, int MidHP2) { builder.AddInt(12, MidHP2, 0); }
  public static void AddMidReward2(FlatBufferBuilder builder, VectorOffset MidReward2Offset) { builder.AddOffset(13, MidReward2Offset.Value, 0); }
  public static VectorOffset CreateMidReward2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMidReward2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMidReward2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.MonsterHunterRowData> EndMonsterHunterRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.MonsterHunterRowData>(o);
  }
};

public struct MonsterHunter : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MonsterHunter GetRootAsMonsterHunter(ByteBuffer _bb) { return GetRootAsMonsterHunter(_bb, new MonsterHunter()); }
  public static MonsterHunter GetRootAsMonsterHunter(ByteBuffer _bb, MonsterHunter obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MonsterHunter __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.MonsterHunterRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.MonsterHunterRowData?)(new GameConfigs.MonsterHunterRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.MonsterHunter> CreateMonsterHunter(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MonsterHunter.AddDatalist(builder, datalistOffset);
    return MonsterHunter.EndMonsterHunter(builder);
  }

  public static void StartMonsterHunter(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.MonsterHunterRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.MonsterHunterRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.MonsterHunter> EndMonsterHunter(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.MonsterHunter>(o);
  }
  public static void FinishMonsterHunterBuffer(FlatBufferBuilder builder, Offset<GameConfigs.MonsterHunter> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMonsterHunterBuffer(FlatBufferBuilder builder, Offset<GameConfigs.MonsterHunter> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
