// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct game_globalRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static game_globalRowData GetRootAsgame_globalRowData(ByteBuffer _bb) { return GetRootAsgame_globalRowData(_bb, new game_globalRowData()); }
  public static game_globalRowData GetRootAsgame_globalRowData(ByteBuffer _bb, game_globalRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public game_globalRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Value { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(6); }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.game_globalRowData> Creategame_globalRowData(FlatBufferBuilder builder,
      StringOffset NameOffset = default(StringOffset),
      StringOffset ValueOffset = default(StringOffset),
      int Type = 0) {
    builder.StartTable(3);
    game_globalRowData.AddType(builder, Type);
    game_globalRowData.AddValue(builder, ValueOffset);
    game_globalRowData.AddName(builder, NameOffset);
    return game_globalRowData.Endgame_globalRowData(builder);
  }

  public static void Startgame_globalRowData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(0, NameOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset ValueOffset) { builder.AddOffset(1, ValueOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(2, Type, 0); }
  public static Offset<GameConfigs.game_globalRowData> Endgame_globalRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.game_globalRowData>(o);
  }
};

public struct game_global : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static game_global GetRootAsgame_global(ByteBuffer _bb) { return GetRootAsgame_global(_bb, new game_global()); }
  public static game_global GetRootAsgame_global(ByteBuffer _bb, game_global obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public game_global __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.game_globalRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.game_globalRowData?)(new GameConfigs.game_globalRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.game_global> Creategame_global(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    game_global.AddDatalist(builder, datalistOffset);
    return game_global.Endgame_global(builder);
  }

  public static void Startgame_global(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.game_globalRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.game_globalRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.game_global> Endgame_global(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.game_global>(o);
  }
  public static void Finishgame_globalBuffer(FlatBufferBuilder builder, Offset<GameConfigs.game_global> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedgame_globalBuffer(FlatBufferBuilder builder, Offset<GameConfigs.game_global> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
