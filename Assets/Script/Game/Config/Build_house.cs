// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Build_houseRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Build_houseRowData GetRootAsBuild_houseRowData(ByteBuffer _bb) { return GetRootAsBuild_houseRowData(_bb, new Build_houseRowData()); }
  public static Build_houseRowData GetRootAsBuild_houseRowData(ByteBuffer _bb, Build_houseRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Build_houseRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BoardId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuildLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EXP { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuildIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuildIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBuildIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBuildIconArray() { return __p.__vector_as_array<byte>(12); }
  public string BuildRes { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuildResBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetBuildResBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetBuildResArray() { return __p.__vector_as_array<byte>(14); }
  public string BuildResBroken { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuildResBrokenBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetBuildResBrokenBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetBuildResBrokenArray() { return __p.__vector_as_array<byte>(16); }
  public int BuildCost(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuildCostLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBuildCostBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetBuildCostBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetBuildCostArray() { return __p.__vector_as_array<int>(18); }
  public int FixCost(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int FixCostLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetFixCostBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetFixCostBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetFixCostArray() { return __p.__vector_as_array<int>(20); }
  public int StopReward(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StopRewardLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStopRewardBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetStopRewardBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetStopRewardArray() { return __p.__vector_as_array<int>(22); }
  public int RentReward(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RentRewardLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRentRewardBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetRentRewardBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetRentRewardArray() { return __p.__vector_as_array<int>(24); }
  public int OccupyReward(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OccupyRewardLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOccupyRewardBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetOccupyRewardBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetOccupyRewardArray() { return __p.__vector_as_array<int>(26); }

  public static Offset<GameConfigs.Build_houseRowData> CreateBuild_houseRowData(FlatBufferBuilder builder,
      int id = 0,
      int BoardId = 0,
      int BuildLevel = 0,
      int EXP = 0,
      StringOffset BuildIconOffset = default(StringOffset),
      StringOffset BuildResOffset = default(StringOffset),
      StringOffset BuildResBrokenOffset = default(StringOffset),
      VectorOffset BuildCostOffset = default(VectorOffset),
      VectorOffset FixCostOffset = default(VectorOffset),
      VectorOffset StopRewardOffset = default(VectorOffset),
      VectorOffset RentRewardOffset = default(VectorOffset),
      VectorOffset OccupyRewardOffset = default(VectorOffset)) {
    builder.StartTable(12);
    Build_houseRowData.AddOccupyReward(builder, OccupyRewardOffset);
    Build_houseRowData.AddRentReward(builder, RentRewardOffset);
    Build_houseRowData.AddStopReward(builder, StopRewardOffset);
    Build_houseRowData.AddFixCost(builder, FixCostOffset);
    Build_houseRowData.AddBuildCost(builder, BuildCostOffset);
    Build_houseRowData.AddBuildResBroken(builder, BuildResBrokenOffset);
    Build_houseRowData.AddBuildRes(builder, BuildResOffset);
    Build_houseRowData.AddBuildIcon(builder, BuildIconOffset);
    Build_houseRowData.AddEXP(builder, EXP);
    Build_houseRowData.AddBuildLevel(builder, BuildLevel);
    Build_houseRowData.AddBoardId(builder, BoardId);
    Build_houseRowData.AddId(builder, id);
    return Build_houseRowData.EndBuild_houseRowData(builder);
  }

  public static void StartBuild_houseRowData(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddBoardId(FlatBufferBuilder builder, int BoardId) { builder.AddInt(1, BoardId, 0); }
  public static void AddBuildLevel(FlatBufferBuilder builder, int BuildLevel) { builder.AddInt(2, BuildLevel, 0); }
  public static void AddEXP(FlatBufferBuilder builder, int EXP) { builder.AddInt(3, EXP, 0); }
  public static void AddBuildIcon(FlatBufferBuilder builder, StringOffset BuildIconOffset) { builder.AddOffset(4, BuildIconOffset.Value, 0); }
  public static void AddBuildRes(FlatBufferBuilder builder, StringOffset BuildResOffset) { builder.AddOffset(5, BuildResOffset.Value, 0); }
  public static void AddBuildResBroken(FlatBufferBuilder builder, StringOffset BuildResBrokenOffset) { builder.AddOffset(6, BuildResBrokenOffset.Value, 0); }
  public static void AddBuildCost(FlatBufferBuilder builder, VectorOffset BuildCostOffset) { builder.AddOffset(7, BuildCostOffset.Value, 0); }
  public static VectorOffset CreateBuildCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuildCostVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBuildCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFixCost(FlatBufferBuilder builder, VectorOffset FixCostOffset) { builder.AddOffset(8, FixCostOffset.Value, 0); }
  public static VectorOffset CreateFixCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFixCostVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFixCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStopReward(FlatBufferBuilder builder, VectorOffset StopRewardOffset) { builder.AddOffset(9, StopRewardOffset.Value, 0); }
  public static VectorOffset CreateStopRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStopRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStopRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRentReward(FlatBufferBuilder builder, VectorOffset RentRewardOffset) { builder.AddOffset(10, RentRewardOffset.Value, 0); }
  public static VectorOffset CreateRentRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRentRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRentRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOccupyReward(FlatBufferBuilder builder, VectorOffset OccupyRewardOffset) { builder.AddOffset(11, OccupyRewardOffset.Value, 0); }
  public static VectorOffset CreateOccupyRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOccupyRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOccupyRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Build_houseRowData> EndBuild_houseRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Build_houseRowData>(o);
  }
};

public struct Build_house : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Build_house GetRootAsBuild_house(ByteBuffer _bb) { return GetRootAsBuild_house(_bb, new Build_house()); }
  public static Build_house GetRootAsBuild_house(ByteBuffer _bb, Build_house obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Build_house __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Build_houseRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Build_houseRowData?)(new GameConfigs.Build_houseRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Build_house> CreateBuild_house(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Build_house.AddDatalist(builder, datalistOffset);
    return Build_house.EndBuild_house(builder);
  }

  public static void StartBuild_house(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Build_houseRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Build_houseRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Build_house> EndBuild_house(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Build_house>(o);
  }
  public static void FinishBuild_houseBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Build_house> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBuild_houseBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Build_house> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
