// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BuffRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BuffRowData GetRootAsBuffRowData(ByteBuffer _bb) { return GetRootAsBuffRowData(_bb, new BuffRowData()); }
  public static BuffRowData GetRootAsBuffRowData(ByteBuffer _bb, BuffRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuffRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Attribute { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Target { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TargetID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AddType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Value { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Time { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.BuffRowData> CreateBuffRowData(FlatBufferBuilder builder,
      int ID = 0,
      int Attribute = 0,
      int Target = 0,
      int TargetID = 0,
      int AddType = 0,
      int Value = 0,
      int Time = 0) {
    builder.StartTable(7);
    BuffRowData.AddTime(builder, Time);
    BuffRowData.AddValue(builder, Value);
    BuffRowData.AddAddType(builder, AddType);
    BuffRowData.AddTargetID(builder, TargetID);
    BuffRowData.AddTarget(builder, Target);
    BuffRowData.AddAttribute(builder, Attribute);
    BuffRowData.AddID(builder, ID);
    return BuffRowData.EndBuffRowData(builder);
  }

  public static void StartBuffRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddAttribute(FlatBufferBuilder builder, int Attribute) { builder.AddInt(1, Attribute, 0); }
  public static void AddTarget(FlatBufferBuilder builder, int Target) { builder.AddInt(2, Target, 0); }
  public static void AddTargetID(FlatBufferBuilder builder, int TargetID) { builder.AddInt(3, TargetID, 0); }
  public static void AddAddType(FlatBufferBuilder builder, int AddType) { builder.AddInt(4, AddType, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(5, Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, int Time) { builder.AddInt(6, Time, 0); }
  public static Offset<GameConfigs.BuffRowData> EndBuffRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.BuffRowData>(o);
  }
};

public struct Buff : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Buff GetRootAsBuff(ByteBuffer _bb) { return GetRootAsBuff(_bb, new Buff()); }
  public static Buff GetRootAsBuff(ByteBuffer _bb, Buff obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Buff __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.BuffRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.BuffRowData?)(new GameConfigs.BuffRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Buff> CreateBuff(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Buff.AddDatalist(builder, datalistOffset);
    return Buff.EndBuff(builder);
  }

  public static void StartBuff(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.BuffRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.BuffRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Buff> EndBuff(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Buff>(o);
  }
  public static void FinishBuffBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Buff> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBuffBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Buff> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
