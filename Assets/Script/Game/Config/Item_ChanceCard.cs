// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Item_ChanceCardRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Item_ChanceCardRowData GetRootAsItem_ChanceCardRowData(ByteBuffer _bb) { return GetRootAsItem_ChanceCardRowData(_bb, new Item_ChanceCardRowData()); }
  public static Item_ChanceCardRowData GetRootAsItem_ChanceCardRowData(ByteBuffer _bb, Item_ChanceCardRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Item_ChanceCardRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Value(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ValueLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetValueBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetValueArray() { return __p.__vector_as_array<int>(10); }
  public int BetType { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BetValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(16); }
  public string Description { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(18); }
  public string Icon { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(20); }
  public string ShowDes { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowDesBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetShowDesBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetShowDesArray() { return __p.__vector_as_array<byte>(22); }
  public string ShowImage { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShowImageBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetShowImageBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetShowImageArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<GameConfigs.Item_ChanceCardRowData> CreateItem_ChanceCardRowData(FlatBufferBuilder builder,
      int Id = 0,
      int ItemType = 0,
      int Type = 0,
      VectorOffset ValueOffset = default(VectorOffset),
      int BetType = 0,
      int BetValue = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset DescriptionOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset ShowDesOffset = default(StringOffset),
      StringOffset ShowImageOffset = default(StringOffset)) {
    builder.StartTable(11);
    Item_ChanceCardRowData.AddShowImage(builder, ShowImageOffset);
    Item_ChanceCardRowData.AddShowDes(builder, ShowDesOffset);
    Item_ChanceCardRowData.AddIcon(builder, IconOffset);
    Item_ChanceCardRowData.AddDescription(builder, DescriptionOffset);
    Item_ChanceCardRowData.AddName(builder, NameOffset);
    Item_ChanceCardRowData.AddBetValue(builder, BetValue);
    Item_ChanceCardRowData.AddBetType(builder, BetType);
    Item_ChanceCardRowData.AddValue(builder, ValueOffset);
    Item_ChanceCardRowData.AddType(builder, Type);
    Item_ChanceCardRowData.AddItemType(builder, ItemType);
    Item_ChanceCardRowData.AddId(builder, Id);
    return Item_ChanceCardRowData.EndItem_ChanceCardRowData(builder);
  }

  public static void StartItem_ChanceCardRowData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddItemType(FlatBufferBuilder builder, int ItemType) { builder.AddInt(1, ItemType, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(2, Type, 0); }
  public static void AddValue(FlatBufferBuilder builder, VectorOffset ValueOffset) { builder.AddOffset(3, ValueOffset.Value, 0); }
  public static VectorOffset CreateValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBetType(FlatBufferBuilder builder, int BetType) { builder.AddInt(4, BetType, 0); }
  public static void AddBetValue(FlatBufferBuilder builder, int BetValue) { builder.AddInt(5, BetValue, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(6, NameOffset.Value, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(7, DescriptionOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(8, IconOffset.Value, 0); }
  public static void AddShowDes(FlatBufferBuilder builder, StringOffset ShowDesOffset) { builder.AddOffset(9, ShowDesOffset.Value, 0); }
  public static void AddShowImage(FlatBufferBuilder builder, StringOffset ShowImageOffset) { builder.AddOffset(10, ShowImageOffset.Value, 0); }
  public static Offset<GameConfigs.Item_ChanceCardRowData> EndItem_ChanceCardRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Item_ChanceCardRowData>(o);
  }
};

public struct Item_ChanceCard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Item_ChanceCard GetRootAsItem_ChanceCard(ByteBuffer _bb) { return GetRootAsItem_ChanceCard(_bb, new Item_ChanceCard()); }
  public static Item_ChanceCard GetRootAsItem_ChanceCard(ByteBuffer _bb, Item_ChanceCard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Item_ChanceCard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Item_ChanceCardRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Item_ChanceCardRowData?)(new GameConfigs.Item_ChanceCardRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Item_ChanceCard> CreateItem_ChanceCard(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Item_ChanceCard.AddDatalist(builder, datalistOffset);
    return Item_ChanceCard.EndItem_ChanceCard(builder);
  }

  public static void StartItem_ChanceCard(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Item_ChanceCardRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Item_ChanceCardRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Item_ChanceCard> EndItem_ChanceCard(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Item_ChanceCard>(o);
  }
  public static void FinishItem_ChanceCardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Item_ChanceCard> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedItem_ChanceCardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Item_ChanceCard> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
