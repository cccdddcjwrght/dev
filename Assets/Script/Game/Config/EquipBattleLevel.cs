// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EquipBattleLevelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EquipBattleLevelRowData GetRootAsEquipBattleLevelRowData(ByteBuffer _bb) { return GetRootAsEquipBattleLevelRowData(_bb, new EquipBattleLevelRowData()); }
  public static EquipBattleLevelRowData GetRootAsEquipBattleLevelRowData(ByteBuffer _bb, EquipBattleLevelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EquipBattleLevelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HpRange(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HpRangeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetHpRangeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetHpRangeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetHpRangeArray() { return __p.__vector_as_array<int>(6); }
  public int AtkRange(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AtkRangeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAtkRangeBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetAtkRangeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetAtkRangeArray() { return __p.__vector_as_array<int>(8); }
  public int Dodge(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DodgeLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDodgeBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetDodgeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetDodgeArray() { return __p.__vector_as_array<int>(10); }
  public int Combo(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ComboLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetComboBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetComboBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetComboArray() { return __p.__vector_as_array<int>(12); }
  public int Crit(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CritLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCritBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetCritBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetCritArray() { return __p.__vector_as_array<int>(14); }
  public int Stun(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StunLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStunBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetStunBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetStunArray() { return __p.__vector_as_array<int>(16); }
  public int Steal(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StealLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStealBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetStealBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetStealArray() { return __p.__vector_as_array<int>(18); }
  public int AntiDodge(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AntiDodgeLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAntiDodgeBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetAntiDodgeBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetAntiDodgeArray() { return __p.__vector_as_array<int>(20); }
  public int AntiCombo(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AntiComboLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAntiComboBytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetAntiComboBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetAntiComboArray() { return __p.__vector_as_array<int>(22); }
  public int AntiCrit(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AntiCritLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAntiCritBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetAntiCritBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetAntiCritArray() { return __p.__vector_as_array<int>(24); }
  public int AntiStun(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AntiStunLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAntiStunBytes() { return __p.__vector_as_span<int>(26, 4); }
#else
  public ArraySegment<byte>? GetAntiStunBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public int[] GetAntiStunArray() { return __p.__vector_as_array<int>(26); }
  public int AntiSteal(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int AntiStealLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetAntiStealBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetAntiStealBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetAntiStealArray() { return __p.__vector_as_array<int>(28); }

  public static Offset<GameConfigs.EquipBattleLevelRowData> CreateEquipBattleLevelRowData(FlatBufferBuilder builder,
      int Id = 0,
      VectorOffset HpRangeOffset = default(VectorOffset),
      VectorOffset AtkRangeOffset = default(VectorOffset),
      VectorOffset DodgeOffset = default(VectorOffset),
      VectorOffset ComboOffset = default(VectorOffset),
      VectorOffset CritOffset = default(VectorOffset),
      VectorOffset StunOffset = default(VectorOffset),
      VectorOffset StealOffset = default(VectorOffset),
      VectorOffset AntiDodgeOffset = default(VectorOffset),
      VectorOffset AntiComboOffset = default(VectorOffset),
      VectorOffset AntiCritOffset = default(VectorOffset),
      VectorOffset AntiStunOffset = default(VectorOffset),
      VectorOffset AntiStealOffset = default(VectorOffset)) {
    builder.StartTable(13);
    EquipBattleLevelRowData.AddAntiSteal(builder, AntiStealOffset);
    EquipBattleLevelRowData.AddAntiStun(builder, AntiStunOffset);
    EquipBattleLevelRowData.AddAntiCrit(builder, AntiCritOffset);
    EquipBattleLevelRowData.AddAntiCombo(builder, AntiComboOffset);
    EquipBattleLevelRowData.AddAntiDodge(builder, AntiDodgeOffset);
    EquipBattleLevelRowData.AddSteal(builder, StealOffset);
    EquipBattleLevelRowData.AddStun(builder, StunOffset);
    EquipBattleLevelRowData.AddCrit(builder, CritOffset);
    EquipBattleLevelRowData.AddCombo(builder, ComboOffset);
    EquipBattleLevelRowData.AddDodge(builder, DodgeOffset);
    EquipBattleLevelRowData.AddAtkRange(builder, AtkRangeOffset);
    EquipBattleLevelRowData.AddHpRange(builder, HpRangeOffset);
    EquipBattleLevelRowData.AddId(builder, Id);
    return EquipBattleLevelRowData.EndEquipBattleLevelRowData(builder);
  }

  public static void StartEquipBattleLevelRowData(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddHpRange(FlatBufferBuilder builder, VectorOffset HpRangeOffset) { builder.AddOffset(1, HpRangeOffset.Value, 0); }
  public static VectorOffset CreateHpRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHpRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartHpRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAtkRange(FlatBufferBuilder builder, VectorOffset AtkRangeOffset) { builder.AddOffset(2, AtkRangeOffset.Value, 0); }
  public static VectorOffset CreateAtkRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAtkRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAtkRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDodge(FlatBufferBuilder builder, VectorOffset DodgeOffset) { builder.AddOffset(3, DodgeOffset.Value, 0); }
  public static VectorOffset CreateDodgeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDodgeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDodgeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCombo(FlatBufferBuilder builder, VectorOffset ComboOffset) { builder.AddOffset(4, ComboOffset.Value, 0); }
  public static VectorOffset CreateComboVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateComboVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartComboVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCrit(FlatBufferBuilder builder, VectorOffset CritOffset) { builder.AddOffset(5, CritOffset.Value, 0); }
  public static VectorOffset CreateCritVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCritVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCritVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStun(FlatBufferBuilder builder, VectorOffset StunOffset) { builder.AddOffset(6, StunOffset.Value, 0); }
  public static VectorOffset CreateStunVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStunVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStunVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSteal(FlatBufferBuilder builder, VectorOffset StealOffset) { builder.AddOffset(7, StealOffset.Value, 0); }
  public static VectorOffset CreateStealVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStealVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStealVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAntiDodge(FlatBufferBuilder builder, VectorOffset AntiDodgeOffset) { builder.AddOffset(8, AntiDodgeOffset.Value, 0); }
  public static VectorOffset CreateAntiDodgeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAntiDodgeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAntiDodgeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAntiCombo(FlatBufferBuilder builder, VectorOffset AntiComboOffset) { builder.AddOffset(9, AntiComboOffset.Value, 0); }
  public static VectorOffset CreateAntiComboVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAntiComboVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAntiComboVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAntiCrit(FlatBufferBuilder builder, VectorOffset AntiCritOffset) { builder.AddOffset(10, AntiCritOffset.Value, 0); }
  public static VectorOffset CreateAntiCritVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAntiCritVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAntiCritVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAntiStun(FlatBufferBuilder builder, VectorOffset AntiStunOffset) { builder.AddOffset(11, AntiStunOffset.Value, 0); }
  public static VectorOffset CreateAntiStunVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAntiStunVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAntiStunVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAntiSteal(FlatBufferBuilder builder, VectorOffset AntiStealOffset) { builder.AddOffset(12, AntiStealOffset.Value, 0); }
  public static VectorOffset CreateAntiStealVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateAntiStealVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAntiStealVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.EquipBattleLevelRowData> EndEquipBattleLevelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.EquipBattleLevelRowData>(o);
  }
};

public struct EquipBattleLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EquipBattleLevel GetRootAsEquipBattleLevel(ByteBuffer _bb) { return GetRootAsEquipBattleLevel(_bb, new EquipBattleLevel()); }
  public static EquipBattleLevel GetRootAsEquipBattleLevel(ByteBuffer _bb, EquipBattleLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EquipBattleLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.EquipBattleLevelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.EquipBattleLevelRowData?)(new GameConfigs.EquipBattleLevelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.EquipBattleLevel> CreateEquipBattleLevel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EquipBattleLevel.AddDatalist(builder, datalistOffset);
    return EquipBattleLevel.EndEquipBattleLevel(builder);
  }

  public static void StartEquipBattleLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.EquipBattleLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.EquipBattleLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.EquipBattleLevel> EndEquipBattleLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.EquipBattleLevel>(o);
  }
  public static void FinishEquipBattleLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.EquipBattleLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEquipBattleLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.EquipBattleLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
