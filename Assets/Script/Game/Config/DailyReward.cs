// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DailyRewardRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DailyRewardRowData GetRootAsDailyRewardRowData(ByteBuffer _bb) { return GetRootAsDailyRewardRowData(_bb, new DailyRewardRowData()); }
  public static DailyRewardRowData GetRootAsDailyRewardRowData(ByteBuffer _bb, DailyRewardRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DailyRewardRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Num { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward1(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward1Length { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward1Bytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetReward1Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetReward1Array() { return __p.__vector_as_array<int>(10); }
  public int Reward2(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward2Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward2Bytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetReward2Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetReward2Array() { return __p.__vector_as_array<int>(12); }
  public int Reward3(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward3Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward3Bytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetReward3Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetReward3Array() { return __p.__vector_as_array<int>(14); }
  public int LevelUnlock(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelUnlockLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLevelUnlockBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetLevelUnlockBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetLevelUnlockArray() { return __p.__vector_as_array<int>(16); }

  public static Offset<GameConfigs.DailyRewardRowData> CreateDailyRewardRowData(FlatBufferBuilder builder,
      int Id = 0,
      int Type = 0,
      int Num = 0,
      VectorOffset Reward1Offset = default(VectorOffset),
      VectorOffset Reward2Offset = default(VectorOffset),
      VectorOffset Reward3Offset = default(VectorOffset),
      VectorOffset LevelUnlockOffset = default(VectorOffset)) {
    builder.StartTable(7);
    DailyRewardRowData.AddLevelUnlock(builder, LevelUnlockOffset);
    DailyRewardRowData.AddReward3(builder, Reward3Offset);
    DailyRewardRowData.AddReward2(builder, Reward2Offset);
    DailyRewardRowData.AddReward1(builder, Reward1Offset);
    DailyRewardRowData.AddNum(builder, Num);
    DailyRewardRowData.AddType(builder, Type);
    DailyRewardRowData.AddId(builder, Id);
    return DailyRewardRowData.EndDailyRewardRowData(builder);
  }

  public static void StartDailyRewardRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddNum(FlatBufferBuilder builder, int Num) { builder.AddInt(2, Num, 0); }
  public static void AddReward1(FlatBufferBuilder builder, VectorOffset Reward1Offset) { builder.AddOffset(3, Reward1Offset.Value, 0); }
  public static VectorOffset CreateReward1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward2(FlatBufferBuilder builder, VectorOffset Reward2Offset) { builder.AddOffset(4, Reward2Offset.Value, 0); }
  public static VectorOffset CreateReward2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward3(FlatBufferBuilder builder, VectorOffset Reward3Offset) { builder.AddOffset(5, Reward3Offset.Value, 0); }
  public static VectorOffset CreateReward3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLevelUnlock(FlatBufferBuilder builder, VectorOffset LevelUnlockOffset) { builder.AddOffset(6, LevelUnlockOffset.Value, 0); }
  public static VectorOffset CreateLevelUnlockVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLevelUnlockVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLevelUnlockVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.DailyRewardRowData> EndDailyRewardRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.DailyRewardRowData>(o);
  }
};

public struct DailyReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DailyReward GetRootAsDailyReward(ByteBuffer _bb) { return GetRootAsDailyReward(_bb, new DailyReward()); }
  public static DailyReward GetRootAsDailyReward(ByteBuffer _bb, DailyReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DailyReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.DailyRewardRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.DailyRewardRowData?)(new GameConfigs.DailyRewardRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.DailyReward> CreateDailyReward(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DailyReward.AddDatalist(builder, datalistOffset);
    return DailyReward.EndDailyReward(builder);
  }

  public static void StartDailyReward(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.DailyRewardRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.DailyRewardRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.DailyReward> EndDailyReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.DailyReward>(o);
  }
  public static void FinishDailyRewardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.DailyReward> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDailyRewardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.DailyReward> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
