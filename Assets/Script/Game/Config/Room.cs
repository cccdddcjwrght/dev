// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomRowData GetRootAsRoomRowData(ByteBuffer _bb) { return GetRootAsRoomRowData(_bb, new RoomRowData()); }
  public static RoomRowData GetRootAsRoomRowData(ByteBuffer _bb, RoomRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public string Resource { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetResourceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetResourceArray() { return __p.__vector_as_array<byte>(10); }
  public int RegionId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.RoomRowData> CreateRoomRowData(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset ResourceOffset = default(StringOffset),
      int RegionId = 0) {
    builder.StartTable(5);
    RoomRowData.AddRegionId(builder, RegionId);
    RoomRowData.AddResource(builder, ResourceOffset);
    RoomRowData.AddIcon(builder, IconOffset);
    RoomRowData.AddName(builder, NameOffset);
    RoomRowData.AddID(builder, ID);
    return RoomRowData.EndRoomRowData(builder);
  }

  public static void StartRoomRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(2, IconOffset.Value, 0); }
  public static void AddResource(FlatBufferBuilder builder, StringOffset ResourceOffset) { builder.AddOffset(3, ResourceOffset.Value, 0); }
  public static void AddRegionId(FlatBufferBuilder builder, int RegionId) { builder.AddInt(4, RegionId, 0); }
  public static Offset<GameConfigs.RoomRowData> EndRoomRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomRowData>(o);
  }
};

public struct Room : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Room GetRootAsRoom(ByteBuffer _bb) { return GetRootAsRoom(_bb, new Room()); }
  public static Room GetRootAsRoom(ByteBuffer _bb, Room obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Room __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RoomRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RoomRowData?)(new GameConfigs.RoomRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Room> CreateRoom(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Room.AddDatalist(builder, datalistOffset);
    return Room.EndRoom(builder);
  }

  public static void StartRoom(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RoomRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RoomRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Room> EndRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Room>(o);
  }
  public static void FinishRoomBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Room> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoomBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Room> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
