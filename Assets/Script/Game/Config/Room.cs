// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomRowData GetRootAsRoomRowData(ByteBuffer _bb) { return GetRootAsRoomRowData(_bb, new RoomRowData()); }
  public static RoomRowData GetRootAsRoomRowData(ByteBuffer _bb, RoomRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public string Resource { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetResourceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetResourceArray() { return __p.__vector_as_array<byte>(10); }
  public string Decor { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDecorBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDecorBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDecorArray() { return __p.__vector_as_array<byte>(12); }
  public float Adjust { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int RegionId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SubId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward1(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward1Length { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward1Bytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetReward1Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetReward1Array() { return __p.__vector_as_array<int>(20); }
  public int Reward2(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward2Length { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward2Bytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetReward2Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetReward2Array() { return __p.__vector_as_array<int>(22); }
  public int Reward3(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward3Length { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward3Bytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetReward3Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetReward3Array() { return __p.__vector_as_array<int>(24); }
  public int LevelMax { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StartImage { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartImageBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetStartImageBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetStartImageArray() { return __p.__vector_as_array<byte>(28); }
  public string EndImage { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndImageBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetEndImageBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetEndImageArray() { return __p.__vector_as_array<byte>(30); }
  public int InvestorChance { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InvestorGems { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int InvestorRatio { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float RecommendValue(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RecommendValueLength { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRecommendValueBytes() { return __p.__vector_as_span<float>(38, 4); }
#else
  public ArraySegment<byte>? GetRecommendValueBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public float[] GetRecommendValueArray() { return __p.__vector_as_array<float>(38); }
  public int NewGoods(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NewGoodsLength { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNewGoodsBytes() { return __p.__vector_as_span<int>(40, 4); }
#else
  public ArraySegment<byte>? GetNewGoodsBytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public int[] GetNewGoodsArray() { return __p.__vector_as_array<int>(40); }
  public int ExploreLevelMax { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.RoomRowData> CreateRoomRowData(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset ResourceOffset = default(StringOffset),
      StringOffset DecorOffset = default(StringOffset),
      float Adjust = 0.0f,
      int RegionId = 0,
      int SubId = 0,
      VectorOffset Reward1Offset = default(VectorOffset),
      VectorOffset Reward2Offset = default(VectorOffset),
      VectorOffset Reward3Offset = default(VectorOffset),
      int LevelMax = 0,
      StringOffset StartImageOffset = default(StringOffset),
      StringOffset EndImageOffset = default(StringOffset),
      int InvestorChance = 0,
      int InvestorGems = 0,
      int InvestorRatio = 0,
      VectorOffset RecommendValueOffset = default(VectorOffset),
      VectorOffset NewGoodsOffset = default(VectorOffset),
      int ExploreLevelMax = 0) {
    builder.StartTable(20);
    RoomRowData.AddExploreLevelMax(builder, ExploreLevelMax);
    RoomRowData.AddNewGoods(builder, NewGoodsOffset);
    RoomRowData.AddRecommendValue(builder, RecommendValueOffset);
    RoomRowData.AddInvestorRatio(builder, InvestorRatio);
    RoomRowData.AddInvestorGems(builder, InvestorGems);
    RoomRowData.AddInvestorChance(builder, InvestorChance);
    RoomRowData.AddEndImage(builder, EndImageOffset);
    RoomRowData.AddStartImage(builder, StartImageOffset);
    RoomRowData.AddLevelMax(builder, LevelMax);
    RoomRowData.AddReward3(builder, Reward3Offset);
    RoomRowData.AddReward2(builder, Reward2Offset);
    RoomRowData.AddReward1(builder, Reward1Offset);
    RoomRowData.AddSubId(builder, SubId);
    RoomRowData.AddRegionId(builder, RegionId);
    RoomRowData.AddAdjust(builder, Adjust);
    RoomRowData.AddDecor(builder, DecorOffset);
    RoomRowData.AddResource(builder, ResourceOffset);
    RoomRowData.AddIcon(builder, IconOffset);
    RoomRowData.AddName(builder, NameOffset);
    RoomRowData.AddID(builder, ID);
    return RoomRowData.EndRoomRowData(builder);
  }

  public static void StartRoomRowData(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(2, IconOffset.Value, 0); }
  public static void AddResource(FlatBufferBuilder builder, StringOffset ResourceOffset) { builder.AddOffset(3, ResourceOffset.Value, 0); }
  public static void AddDecor(FlatBufferBuilder builder, StringOffset DecorOffset) { builder.AddOffset(4, DecorOffset.Value, 0); }
  public static void AddAdjust(FlatBufferBuilder builder, float Adjust) { builder.AddFloat(5, Adjust, 0.0f); }
  public static void AddRegionId(FlatBufferBuilder builder, int RegionId) { builder.AddInt(6, RegionId, 0); }
  public static void AddSubId(FlatBufferBuilder builder, int SubId) { builder.AddInt(7, SubId, 0); }
  public static void AddReward1(FlatBufferBuilder builder, VectorOffset Reward1Offset) { builder.AddOffset(8, Reward1Offset.Value, 0); }
  public static VectorOffset CreateReward1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward2(FlatBufferBuilder builder, VectorOffset Reward2Offset) { builder.AddOffset(9, Reward2Offset.Value, 0); }
  public static VectorOffset CreateReward2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward3(FlatBufferBuilder builder, VectorOffset Reward3Offset) { builder.AddOffset(10, Reward3Offset.Value, 0); }
  public static VectorOffset CreateReward3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLevelMax(FlatBufferBuilder builder, int LevelMax) { builder.AddInt(11, LevelMax, 0); }
  public static void AddStartImage(FlatBufferBuilder builder, StringOffset StartImageOffset) { builder.AddOffset(12, StartImageOffset.Value, 0); }
  public static void AddEndImage(FlatBufferBuilder builder, StringOffset EndImageOffset) { builder.AddOffset(13, EndImageOffset.Value, 0); }
  public static void AddInvestorChance(FlatBufferBuilder builder, int InvestorChance) { builder.AddInt(14, InvestorChance, 0); }
  public static void AddInvestorGems(FlatBufferBuilder builder, int InvestorGems) { builder.AddInt(15, InvestorGems, 0); }
  public static void AddInvestorRatio(FlatBufferBuilder builder, int InvestorRatio) { builder.AddInt(16, InvestorRatio, 0); }
  public static void AddRecommendValue(FlatBufferBuilder builder, VectorOffset RecommendValueOffset) { builder.AddOffset(17, RecommendValueOffset.Value, 0); }
  public static VectorOffset CreateRecommendValueVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRecommendValueVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRecommendValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNewGoods(FlatBufferBuilder builder, VectorOffset NewGoodsOffset) { builder.AddOffset(18, NewGoodsOffset.Value, 0); }
  public static VectorOffset CreateNewGoodsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNewGoodsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNewGoodsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddExploreLevelMax(FlatBufferBuilder builder, int ExploreLevelMax) { builder.AddInt(19, ExploreLevelMax, 0); }
  public static Offset<GameConfigs.RoomRowData> EndRoomRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomRowData>(o);
  }
};

public struct Room : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Room GetRootAsRoom(ByteBuffer _bb) { return GetRootAsRoom(_bb, new Room()); }
  public static Room GetRootAsRoom(ByteBuffer _bb, Room obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Room __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RoomRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RoomRowData?)(new GameConfigs.RoomRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Room> CreateRoom(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Room.AddDatalist(builder, datalistOffset);
    return Room.EndRoom(builder);
  }

  public static void StartRoom(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RoomRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RoomRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Room> EndRoom(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Room>(o);
  }
  public static void FinishRoomBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Room> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoomBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Room> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
