// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ClubTaskRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ClubTaskRowData GetRootAsClubTaskRowData(ByteBuffer _bb) { return GetRootAsClubTaskRowData(_bb, new ClubTaskRowData()); }
  public static ClubTaskRowData GetRootAsClubTaskRowData(ByteBuffer _bb, ClubTaskRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ClubTaskRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Marker { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Description { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(8); }
  public int Task { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetRewardBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetRewardArray() { return __p.__vector_as_array<int>(12); }
  public int Repeat { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Weight { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.ClubTaskRowData> CreateClubTaskRowData(FlatBufferBuilder builder,
      int Id = 0,
      int Marker = 0,
      StringOffset DescriptionOffset = default(StringOffset),
      int Task = 0,
      VectorOffset RewardOffset = default(VectorOffset),
      int Repeat = 0,
      int Weight = 0) {
    builder.StartTable(7);
    ClubTaskRowData.AddWeight(builder, Weight);
    ClubTaskRowData.AddRepeat(builder, Repeat);
    ClubTaskRowData.AddReward(builder, RewardOffset);
    ClubTaskRowData.AddTask(builder, Task);
    ClubTaskRowData.AddDescription(builder, DescriptionOffset);
    ClubTaskRowData.AddMarker(builder, Marker);
    ClubTaskRowData.AddId(builder, Id);
    return ClubTaskRowData.EndClubTaskRowData(builder);
  }

  public static void StartClubTaskRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddMarker(FlatBufferBuilder builder, int Marker) { builder.AddInt(1, Marker, 0); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset DescriptionOffset) { builder.AddOffset(2, DescriptionOffset.Value, 0); }
  public static void AddTask(FlatBufferBuilder builder, int Task) { builder.AddInt(3, Task, 0); }
  public static void AddReward(FlatBufferBuilder builder, VectorOffset RewardOffset) { builder.AddOffset(4, RewardOffset.Value, 0); }
  public static VectorOffset CreateRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRepeat(FlatBufferBuilder builder, int Repeat) { builder.AddInt(5, Repeat, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(6, Weight, 0); }
  public static Offset<GameConfigs.ClubTaskRowData> EndClubTaskRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ClubTaskRowData>(o);
  }
};

public struct ClubTask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ClubTask GetRootAsClubTask(ByteBuffer _bb) { return GetRootAsClubTask(_bb, new ClubTask()); }
  public static ClubTask GetRootAsClubTask(ByteBuffer _bb, ClubTask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ClubTask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ClubTaskRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ClubTaskRowData?)(new GameConfigs.ClubTaskRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ClubTask> CreateClubTask(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ClubTask.AddDatalist(builder, datalistOffset);
    return ClubTask.EndClubTask(builder);
  }

  public static void StartClubTask(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ClubTaskRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ClubTaskRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ClubTask> EndClubTask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ClubTask>(o);
  }
  public static void FinishClubTaskBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ClubTask> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedClubTaskBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ClubTask> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
