// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RegionRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RegionRowData GetRootAsRegionRowData(ByteBuffer _bb) { return GetRootAsRegionRowData(_bb, new RegionRowData()); }
  public static RegionRowData GetRootAsRegionRowData(ByteBuffer _bb, RegionRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RegionRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Icon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(8); }
  public string StartImage { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStartImageBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetStartImageBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetStartImageArray() { return __p.__vector_as_array<byte>(10); }
  public string DoShowId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDoShowIdBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDoShowIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDoShowIdArray() { return __p.__vector_as_array<byte>(12); }
  public string DoHideId { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDoHideIdBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetDoHideIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetDoHideIdArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<GameConfigs.RegionRowData> CreateRegionRowData(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      StringOffset StartImageOffset = default(StringOffset),
      StringOffset DoShowIdOffset = default(StringOffset),
      StringOffset DoHideIdOffset = default(StringOffset)) {
    builder.StartTable(6);
    RegionRowData.AddDoHideId(builder, DoHideIdOffset);
    RegionRowData.AddDoShowId(builder, DoShowIdOffset);
    RegionRowData.AddStartImage(builder, StartImageOffset);
    RegionRowData.AddIcon(builder, IconOffset);
    RegionRowData.AddName(builder, NameOffset);
    RegionRowData.AddID(builder, ID);
    return RegionRowData.EndRegionRowData(builder);
  }

  public static void StartRegionRowData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(2, IconOffset.Value, 0); }
  public static void AddStartImage(FlatBufferBuilder builder, StringOffset StartImageOffset) { builder.AddOffset(3, StartImageOffset.Value, 0); }
  public static void AddDoShowId(FlatBufferBuilder builder, StringOffset DoShowIdOffset) { builder.AddOffset(4, DoShowIdOffset.Value, 0); }
  public static void AddDoHideId(FlatBufferBuilder builder, StringOffset DoHideIdOffset) { builder.AddOffset(5, DoHideIdOffset.Value, 0); }
  public static Offset<GameConfigs.RegionRowData> EndRegionRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RegionRowData>(o);
  }
};

public struct Region : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Region GetRootAsRegion(ByteBuffer _bb) { return GetRootAsRegion(_bb, new Region()); }
  public static Region GetRootAsRegion(ByteBuffer _bb, Region obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Region __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RegionRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RegionRowData?)(new GameConfigs.RegionRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Region> CreateRegion(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Region.AddDatalist(builder, datalistOffset);
    return Region.EndRegion(builder);
  }

  public static void StartRegion(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RegionRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RegionRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Region> EndRegion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Region>(o);
  }
  public static void FinishRegionBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Region> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRegionBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Region> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
