// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ActivityTimeRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ActivityTimeRowData GetRootAsActivityTimeRowData(ByteBuffer _bb) { return GetRootAsActivityTimeRowData(_bb, new ActivityTimeRowData()); }
  public static ActivityTimeRowData GetRootAsActivityTimeRowData(ByteBuffer _bb, ActivityTimeRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActivityTimeRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BeginTime { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBeginTimeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetBeginTimeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetBeginTimeArray() { return __p.__vector_as_array<byte>(6); }
  public string EndTime { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEndTimeBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetEndTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetEndTimeArray() { return __p.__vector_as_array<byte>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Value { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.ActivityTimeRowData> CreateActivityTimeRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset BeginTimeOffset = default(StringOffset),
      StringOffset EndTimeOffset = default(StringOffset),
      int Type = 0,
      int Value = 0) {
    builder.StartTable(5);
    ActivityTimeRowData.AddValue(builder, Value);
    ActivityTimeRowData.AddType(builder, Type);
    ActivityTimeRowData.AddEndTime(builder, EndTimeOffset);
    ActivityTimeRowData.AddBeginTime(builder, BeginTimeOffset);
    ActivityTimeRowData.AddId(builder, Id);
    return ActivityTimeRowData.EndActivityTimeRowData(builder);
  }

  public static void StartActivityTimeRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddBeginTime(FlatBufferBuilder builder, StringOffset BeginTimeOffset) { builder.AddOffset(1, BeginTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, StringOffset EndTimeOffset) { builder.AddOffset(2, EndTimeOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(3, Type, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(4, Value, 0); }
  public static Offset<GameConfigs.ActivityTimeRowData> EndActivityTimeRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ActivityTimeRowData>(o);
  }
};

public struct ActivityTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ActivityTime GetRootAsActivityTime(ByteBuffer _bb) { return GetRootAsActivityTime(_bb, new ActivityTime()); }
  public static ActivityTime GetRootAsActivityTime(ByteBuffer _bb, ActivityTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActivityTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ActivityTimeRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ActivityTimeRowData?)(new GameConfigs.ActivityTimeRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ActivityTime> CreateActivityTime(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ActivityTime.AddDatalist(builder, datalistOffset);
    return ActivityTime.EndActivityTime(builder);
  }

  public static void StartActivityTime(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ActivityTimeRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ActivityTimeRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ActivityTime> EndActivityTime(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ActivityTime>(o);
  }
  public static void FinishActivityTimeBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ActivityTime> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedActivityTimeBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ActivityTime> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
