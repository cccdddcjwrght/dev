// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TelportRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TelportRowData GetRootAsTelportRowData(ByteBuffer _bb) { return GetRootAsTelportRowData(_bb, new TelportRowData()); }
  public static TelportRowData GetRootAsTelportRowData(ByteBuffer _bb, TelportRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TelportRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public int PosX { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PosY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SceneName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSceneNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSceneNameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GameConfigs.TelportRowData> CreateTelportRowData(FlatBufferBuilder builder,
      int id = 0,
      StringOffset descOffset = default(StringOffset),
      int posX = 0,
      int posY = 0,
      StringOffset sceneNameOffset = default(StringOffset)) {
    builder.StartTable(5);
    TelportRowData.AddSceneName(builder, sceneNameOffset);
    TelportRowData.AddPosY(builder, posY);
    TelportRowData.AddPosX(builder, posX);
    TelportRowData.AddDesc(builder, descOffset);
    TelportRowData.AddId(builder, id);
    return TelportRowData.EndTelportRowData(builder);
  }

  public static void StartTelportRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddPosX(FlatBufferBuilder builder, int posX) { builder.AddInt(2, posX, 0); }
  public static void AddPosY(FlatBufferBuilder builder, int posY) { builder.AddInt(3, posY, 0); }
  public static void AddSceneName(FlatBufferBuilder builder, StringOffset sceneNameOffset) { builder.AddOffset(4, sceneNameOffset.Value, 0); }
  public static Offset<GameConfigs.TelportRowData> EndTelportRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.TelportRowData>(o);
  }
};

public struct Telport : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Telport GetRootAsTelport(ByteBuffer _bb) { return GetRootAsTelport(_bb, new Telport()); }
  public static Telport GetRootAsTelport(ByteBuffer _bb, Telport obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Telport __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.TelportRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.TelportRowData?)(new GameConfigs.TelportRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Telport> CreateTelport(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Telport.AddDatalist(builder, datalistOffset);
    return Telport.EndTelport(builder);
  }

  public static void StartTelport(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.TelportRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.TelportRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Telport> EndTelport(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Telport>(o);
  }
  public static void FinishTelportBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Telport> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTelportBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Telport> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
