// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ADConfigRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ADConfigRowData GetRootAsADConfigRowData(ByteBuffer _bb) { return GetRootAsADConfigRowData(_bb, new ADConfigRowData()); }
  public static ADConfigRowData GetRootAsADConfigRowData(ByteBuffer _bb, ADConfigRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ADConfigRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIDArray() { return __p.__vector_as_array<byte>(4); }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public string Ad { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetAdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetAdArray() { return __p.__vector_as_array<byte>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Disable { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int UnlockNum { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LimitType { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Limit { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Interval { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sustain { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rewards(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardsBytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetRewardsBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetRewardsArray() { return __p.__vector_as_array<int>(24); }

  public static Offset<GameConfigs.ADConfigRowData> CreateADConfigRowData(FlatBufferBuilder builder,
      StringOffset IDOffset = default(StringOffset),
      StringOffset DescOffset = default(StringOffset),
      StringOffset AdOffset = default(StringOffset),
      int Type = 0,
      int Disable = 0,
      int UnlockNum = 0,
      int LimitType = 0,
      int Limit = 0,
      int Interval = 0,
      int Sustain = 0,
      VectorOffset RewardsOffset = default(VectorOffset)) {
    builder.StartTable(11);
    ADConfigRowData.AddRewards(builder, RewardsOffset);
    ADConfigRowData.AddSustain(builder, Sustain);
    ADConfigRowData.AddInterval(builder, Interval);
    ADConfigRowData.AddLimit(builder, Limit);
    ADConfigRowData.AddLimitType(builder, LimitType);
    ADConfigRowData.AddUnlockNum(builder, UnlockNum);
    ADConfigRowData.AddDisable(builder, Disable);
    ADConfigRowData.AddType(builder, Type);
    ADConfigRowData.AddAd(builder, AdOffset);
    ADConfigRowData.AddDesc(builder, DescOffset);
    ADConfigRowData.AddID(builder, IDOffset);
    return ADConfigRowData.EndADConfigRowData(builder);
  }

  public static void StartADConfigRowData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddID(FlatBufferBuilder builder, StringOffset IDOffset) { builder.AddOffset(0, IDOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(1, DescOffset.Value, 0); }
  public static void AddAd(FlatBufferBuilder builder, StringOffset AdOffset) { builder.AddOffset(2, AdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(3, Type, 0); }
  public static void AddDisable(FlatBufferBuilder builder, int Disable) { builder.AddInt(4, Disable, 0); }
  public static void AddUnlockNum(FlatBufferBuilder builder, int UnlockNum) { builder.AddInt(5, UnlockNum, 0); }
  public static void AddLimitType(FlatBufferBuilder builder, int LimitType) { builder.AddInt(6, LimitType, 0); }
  public static void AddLimit(FlatBufferBuilder builder, int Limit) { builder.AddInt(7, Limit, 0); }
  public static void AddInterval(FlatBufferBuilder builder, int Interval) { builder.AddInt(8, Interval, 0); }
  public static void AddSustain(FlatBufferBuilder builder, int Sustain) { builder.AddInt(9, Sustain, 0); }
  public static void AddRewards(FlatBufferBuilder builder, VectorOffset RewardsOffset) { builder.AddOffset(10, RewardsOffset.Value, 0); }
  public static VectorOffset CreateRewardsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ADConfigRowData> EndADConfigRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ADConfigRowData>(o);
  }
};

public struct ADConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ADConfig GetRootAsADConfig(ByteBuffer _bb) { return GetRootAsADConfig(_bb, new ADConfig()); }
  public static ADConfig GetRootAsADConfig(ByteBuffer _bb, ADConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ADConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ADConfigRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ADConfigRowData?)(new GameConfigs.ADConfigRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ADConfig> CreateADConfig(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ADConfig.AddDatalist(builder, datalistOffset);
    return ADConfig.EndADConfig(builder);
  }

  public static void StartADConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ADConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ADConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ADConfig> EndADConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ADConfig>(o);
  }
  public static void FinishADConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ADConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedADConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ADConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
