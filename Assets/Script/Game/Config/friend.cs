// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct friendRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static friendRowData GetRootAsfriendRowData(ByteBuffer _bb) { return GetRootAsfriendRowData(_bb, new friendRowData()); }
  public static friendRowData GetRootAsfriendRowData(ByteBuffer _bb, friendRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public friendRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public int Time { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GapTime(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int GapTimeLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetGapTimeBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetGapTimeBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetGapTimeArray() { return __p.__vector_as_array<int>(8); }
  public int Tip { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TipRatio { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Speed { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Order(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OrderLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOrderBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetOrderBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetOrderArray() { return __p.__vector_as_array<int>(16); }

  public static Offset<GameConfigs.friendRowData> CreatefriendRowData(FlatBufferBuilder builder,
      StringOffset IdOffset = default(StringOffset),
      int Time = 0,
      VectorOffset GapTimeOffset = default(VectorOffset),
      int Tip = 0,
      int TipRatio = 0,
      int Speed = 0,
      VectorOffset OrderOffset = default(VectorOffset)) {
    builder.StartTable(7);
    friendRowData.AddOrder(builder, OrderOffset);
    friendRowData.AddSpeed(builder, Speed);
    friendRowData.AddTipRatio(builder, TipRatio);
    friendRowData.AddTip(builder, Tip);
    friendRowData.AddGapTime(builder, GapTimeOffset);
    friendRowData.AddTime(builder, Time);
    friendRowData.AddId(builder, IdOffset);
    return friendRowData.EndfriendRowData(builder);
  }

  public static void StartfriendRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, StringOffset IdOffset) { builder.AddOffset(0, IdOffset.Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, int Time) { builder.AddInt(1, Time, 0); }
  public static void AddGapTime(FlatBufferBuilder builder, VectorOffset GapTimeOffset) { builder.AddOffset(2, GapTimeOffset.Value, 0); }
  public static VectorOffset CreateGapTimeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateGapTimeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartGapTimeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTip(FlatBufferBuilder builder, int Tip) { builder.AddInt(3, Tip, 0); }
  public static void AddTipRatio(FlatBufferBuilder builder, int TipRatio) { builder.AddInt(4, TipRatio, 0); }
  public static void AddSpeed(FlatBufferBuilder builder, int Speed) { builder.AddInt(5, Speed, 0); }
  public static void AddOrder(FlatBufferBuilder builder, VectorOffset OrderOffset) { builder.AddOffset(6, OrderOffset.Value, 0); }
  public static VectorOffset CreateOrderVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOrderVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOrderVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.friendRowData> EndfriendRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.friendRowData>(o);
  }
};

public struct friend : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static friend GetRootAsfriend(ByteBuffer _bb) { return GetRootAsfriend(_bb, new friend()); }
  public static friend GetRootAsfriend(ByteBuffer _bb, friend obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public friend __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.friendRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.friendRowData?)(new GameConfigs.friendRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.friend> Createfriend(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    friend.AddDatalist(builder, datalistOffset);
    return friend.Endfriend(builder);
  }

  public static void Startfriend(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.friendRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.friendRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.friend> Endfriend(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.friend>(o);
  }
  public static void FinishfriendBuffer(FlatBufferBuilder builder, Offset<GameConfigs.friend> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedfriendBuffer(FlatBufferBuilder builder, Offset<GameConfigs.friend> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
