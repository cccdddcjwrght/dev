// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EquipRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EquipRowData GetRootAsEquipRowData(ByteBuffer _bb) { return GetRootAsEquipRowData(_bb, new EquipRowData()); }
  public static EquipRowData GetRootAsEquipRowData(ByteBuffer _bb, EquipRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EquipRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Slot { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public string Prefab { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetPrefabBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetPrefabArray() { return __p.__vector_as_array<byte>(12); }
  public float Offset(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int OffsetLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetOffsetBytes() { return __p.__vector_as_span<float>(14, 4); }
#else
  public ArraySegment<byte>? GetOffsetBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public float[] GetOffsetArray() { return __p.__vector_as_array<float>(14); }
  public float Rotation(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int RotationLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetRotationBytes() { return __p.__vector_as_span<float>(16, 4); }
#else
  public ArraySegment<byte>? GetRotationBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public float[] GetRotationArray() { return __p.__vector_as_array<float>(16); }
  public float Scale { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GameConfigs.EquipRowData> CreateEquipRowData(FlatBufferBuilder builder,
      int ItemId = 0,
      int Type = 0,
      int Slot = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset PrefabOffset = default(StringOffset),
      VectorOffset offsetOffset = default(VectorOffset),
      VectorOffset rotationOffset = default(VectorOffset),
      float scale = 0.0f) {
    builder.StartTable(8);
    EquipRowData.AddScale(builder, scale);
    EquipRowData.AddRotation(builder, rotationOffset);
    EquipRowData.AddOffset(builder, offsetOffset);
    EquipRowData.AddPrefab(builder, PrefabOffset);
    EquipRowData.AddName(builder, NameOffset);
    EquipRowData.AddSlot(builder, Slot);
    EquipRowData.AddType(builder, Type);
    EquipRowData.AddItemId(builder, ItemId);
    return EquipRowData.EndEquipRowData(builder);
  }

  public static void StartEquipRowData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddItemId(FlatBufferBuilder builder, int ItemId) { builder.AddInt(0, ItemId, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddSlot(FlatBufferBuilder builder, int Slot) { builder.AddInt(2, Slot, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(3, NameOffset.Value, 0); }
  public static void AddPrefab(FlatBufferBuilder builder, StringOffset PrefabOffset) { builder.AddOffset(4, PrefabOffset.Value, 0); }
  public static void AddOffset(FlatBufferBuilder builder, VectorOffset offsetOffset) { builder.AddOffset(5, offsetOffset.Value, 0); }
  public static VectorOffset CreateOffsetVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOffsetVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOffsetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRotation(FlatBufferBuilder builder, VectorOffset rotationOffset) { builder.AddOffset(6, rotationOffset.Value, 0); }
  public static VectorOffset CreateRotationVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRotationVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRotationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(7, scale, 0.0f); }
  public static Offset<GameConfigs.EquipRowData> EndEquipRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.EquipRowData>(o);
  }
};

public struct Equip : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Equip GetRootAsEquip(ByteBuffer _bb) { return GetRootAsEquip(_bb, new Equip()); }
  public static Equip GetRootAsEquip(ByteBuffer _bb, Equip obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Equip __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.EquipRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.EquipRowData?)(new GameConfigs.EquipRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Equip> CreateEquip(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Equip.AddDatalist(builder, datalistOffset);
    return Equip.EndEquip(builder);
  }

  public static void StartEquip(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.EquipRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.EquipRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Equip> EndEquip(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Equip>(o);
  }
  public static void FinishEquipBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Equip> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEquipBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Equip> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
