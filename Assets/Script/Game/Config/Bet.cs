// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BetRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BetRowData GetRootAsBetRowData(ByteBuffer _bb) { return GetRootAsBetRowData(_bb, new BetRowData()); }
  public static BetRowData GetRootAsBetRowData(ByteBuffer _bb, BetRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BetRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DiceRange(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DiceRangeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDiceRangeBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetDiceRangeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetDiceRangeArray() { return __p.__vector_as_array<int>(6); }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Bet(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BetLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBetBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetBetBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetBetArray() { return __p.__vector_as_array<int>(10); }

  public static Offset<GameConfigs.BetRowData> CreateBetRowData(FlatBufferBuilder builder,
      int Id = 0,
      VectorOffset DiceRangeOffset = default(VectorOffset),
      int Level = 0,
      VectorOffset BetOffset = default(VectorOffset)) {
    builder.StartTable(4);
    BetRowData.AddBet(builder, BetOffset);
    BetRowData.AddLevel(builder, Level);
    BetRowData.AddDiceRange(builder, DiceRangeOffset);
    BetRowData.AddId(builder, Id);
    return BetRowData.EndBetRowData(builder);
  }

  public static void StartBetRowData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddDiceRange(FlatBufferBuilder builder, VectorOffset DiceRangeOffset) { builder.AddOffset(1, DiceRangeOffset.Value, 0); }
  public static VectorOffset CreateDiceRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDiceRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDiceRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddBet(FlatBufferBuilder builder, VectorOffset BetOffset) { builder.AddOffset(3, BetOffset.Value, 0); }
  public static VectorOffset CreateBetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBetVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.BetRowData> EndBetRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.BetRowData>(o);
  }
};

public struct Bet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Bet GetRootAsBet(ByteBuffer _bb) { return GetRootAsBet(_bb, new Bet()); }
  public static Bet GetRootAsBet(ByteBuffer _bb, Bet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.BetRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.BetRowData?)(new GameConfigs.BetRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Bet> CreateBet(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Bet.AddDatalist(builder, datalistOffset);
    return Bet.EndBet(builder);
  }

  public static void StartBet(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.BetRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.BetRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Bet> EndBet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Bet>(o);
  }
  public static void FinishBetBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Bet> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBetBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Bet> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
