// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct tableRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static tableRowData GetRootAstableRowData(ByteBuffer _bb) { return GetRootAstableRowData(_bb, new tableRowData()); }
  public static tableRowData GetRootAstableRowData(ByteBuffer _bb, tableRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public tableRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Pos(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PosLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPosBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetPosBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetPosArray() { return __p.__vector_as_array<int>(6); }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int OrderPos(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OrderPosLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOrderPosBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetOrderPosBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetOrderPosArray() { return __p.__vector_as_array<int>(10); }
  public int CustomerPos1(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CustomerPos1Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCustomerPos1Bytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetCustomerPos1Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetCustomerPos1Array() { return __p.__vector_as_array<int>(12); }
  public int CustomerPos2(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CustomerPos2Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCustomerPos2Bytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetCustomerPos2Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetCustomerPos2Array() { return __p.__vector_as_array<int>(14); }

  public static Offset<GameConfigs.tableRowData> CreatetableRowData(FlatBufferBuilder builder,
      int ID = 0,
      VectorOffset posOffset = default(VectorOffset),
      int type = 0,
      VectorOffset orderPosOffset = default(VectorOffset),
      VectorOffset customerPos1Offset = default(VectorOffset),
      VectorOffset customerPos2Offset = default(VectorOffset)) {
    builder.StartTable(6);
    tableRowData.AddCustomerPos2(builder, customerPos2Offset);
    tableRowData.AddCustomerPos1(builder, customerPos1Offset);
    tableRowData.AddOrderPos(builder, orderPosOffset);
    tableRowData.AddType(builder, type);
    tableRowData.AddPos(builder, posOffset);
    tableRowData.AddID(builder, ID);
    return tableRowData.EndtableRowData(builder);
  }

  public static void StarttableRowData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddPos(FlatBufferBuilder builder, VectorOffset posOffset) { builder.AddOffset(1, posOffset.Value, 0); }
  public static VectorOffset CreatePosVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePosVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(2, type, 0); }
  public static void AddOrderPos(FlatBufferBuilder builder, VectorOffset orderPosOffset) { builder.AddOffset(3, orderPosOffset.Value, 0); }
  public static VectorOffset CreateOrderPosVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOrderPosVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOrderPosVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCustomerPos1(FlatBufferBuilder builder, VectorOffset customerPos1Offset) { builder.AddOffset(4, customerPos1Offset.Value, 0); }
  public static VectorOffset CreateCustomerPos1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCustomerPos1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomerPos1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCustomerPos2(FlatBufferBuilder builder, VectorOffset customerPos2Offset) { builder.AddOffset(5, customerPos2Offset.Value, 0); }
  public static VectorOffset CreateCustomerPos2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCustomerPos2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomerPos2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.tableRowData> EndtableRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.tableRowData>(o);
  }
};

public struct table : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static table GetRootAstable(ByteBuffer _bb) { return GetRootAstable(_bb, new table()); }
  public static table GetRootAstable(ByteBuffer _bb, table obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public table __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.tableRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.tableRowData?)(new GameConfigs.tableRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.table> Createtable(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    table.AddDatalist(builder, datalistOffset);
    return table.Endtable(builder);
  }

  public static void Starttable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.tableRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.tableRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.table> Endtable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.table>(o);
  }
  public static void FinishtableBuffer(FlatBufferBuilder builder, Offset<GameConfigs.table> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedtableBuffer(FlatBufferBuilder builder, Offset<GameConfigs.table> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
