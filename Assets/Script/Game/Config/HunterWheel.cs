// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct HunterWheelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static HunterWheelRowData GetRootAsHunterWheelRowData(ByteBuffer _bb) { return GetRootAsHunterWheelRowData(_bb, new HunterWheelRowData()); }
  public static HunterWheelRowData GetRootAsHunterWheelRowData(ByteBuffer _bb, HunterWheelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HunterWheelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WheelValue { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Weight { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.HunterWheelRowData> CreateHunterWheelRowData(FlatBufferBuilder builder,
      int Id = 0,
      int WheelValue = 0,
      int Weight = 0,
      int Type = 0) {
    builder.StartTable(4);
    HunterWheelRowData.AddType(builder, Type);
    HunterWheelRowData.AddWeight(builder, Weight);
    HunterWheelRowData.AddWheelValue(builder, WheelValue);
    HunterWheelRowData.AddId(builder, Id);
    return HunterWheelRowData.EndHunterWheelRowData(builder);
  }

  public static void StartHunterWheelRowData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddWheelValue(FlatBufferBuilder builder, int WheelValue) { builder.AddInt(1, WheelValue, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(2, Weight, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(3, Type, 0); }
  public static Offset<GameConfigs.HunterWheelRowData> EndHunterWheelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.HunterWheelRowData>(o);
  }
};

public struct HunterWheel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static HunterWheel GetRootAsHunterWheel(ByteBuffer _bb) { return GetRootAsHunterWheel(_bb, new HunterWheel()); }
  public static HunterWheel GetRootAsHunterWheel(ByteBuffer _bb, HunterWheel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HunterWheel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.HunterWheelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.HunterWheelRowData?)(new GameConfigs.HunterWheelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.HunterWheel> CreateHunterWheel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    HunterWheel.AddDatalist(builder, datalistOffset);
    return HunterWheel.EndHunterWheel(builder);
  }

  public static void StartHunterWheel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.HunterWheelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.HunterWheelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.HunterWheel> EndHunterWheel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.HunterWheel>(o);
  }
  public static void FinishHunterWheelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.HunterWheel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedHunterWheelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.HunterWheel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
