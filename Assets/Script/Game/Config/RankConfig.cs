// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RankConfigRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RankConfigRowData GetRootAsRankConfigRowData(ByteBuffer _bb) { return GetRootAsRankConfigRowData(_bb, new RankConfigRowData()); }
  public static RankConfigRowData GetRootAsRankConfigRowData(ByteBuffer _bb, RankConfigRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RankConfigRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int RankingId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Tips { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTipsBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTipsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTipsArray() { return __p.__vector_as_array<byte>(8); }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public int RankingMarker { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemId { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankingLevel { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankingRange(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RankingRangeLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRankingRangeBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetRankingRangeBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetRankingRangeArray() { return __p.__vector_as_array<int>(18); }
  public int Reward1(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward1Length { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward1Bytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetReward1Bytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetReward1Array() { return __p.__vector_as_array<int>(20); }
  public int Reward2(int j) { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward2Length { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward2Bytes() { return __p.__vector_as_span<int>(22, 4); }
#else
  public ArraySegment<byte>? GetReward2Bytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public int[] GetReward2Array() { return __p.__vector_as_array<int>(22); }
  public int Reward3(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Reward3Length { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetReward3Bytes() { return __p.__vector_as_span<int>(24, 4); }
#else
  public ArraySegment<byte>? GetReward3Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public int[] GetReward3Array() { return __p.__vector_as_array<int>(24); }

  public static Offset<GameConfigs.RankConfigRowData> CreateRankConfigRowData(FlatBufferBuilder builder,
      int RankingId = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset TipsOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      int RankingMarker = 0,
      int ItemId = 0,
      int RankingLevel = 0,
      VectorOffset RankingRangeOffset = default(VectorOffset),
      VectorOffset Reward1Offset = default(VectorOffset),
      VectorOffset Reward2Offset = default(VectorOffset),
      VectorOffset Reward3Offset = default(VectorOffset)) {
    builder.StartTable(11);
    RankConfigRowData.AddReward3(builder, Reward3Offset);
    RankConfigRowData.AddReward2(builder, Reward2Offset);
    RankConfigRowData.AddReward1(builder, Reward1Offset);
    RankConfigRowData.AddRankingRange(builder, RankingRangeOffset);
    RankConfigRowData.AddRankingLevel(builder, RankingLevel);
    RankConfigRowData.AddItemId(builder, ItemId);
    RankConfigRowData.AddRankingMarker(builder, RankingMarker);
    RankConfigRowData.AddIcon(builder, IconOffset);
    RankConfigRowData.AddTips(builder, TipsOffset);
    RankConfigRowData.AddName(builder, NameOffset);
    RankConfigRowData.AddRankingId(builder, RankingId);
    return RankConfigRowData.EndRankConfigRowData(builder);
  }

  public static void StartRankConfigRowData(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddRankingId(FlatBufferBuilder builder, int RankingId) { builder.AddInt(0, RankingId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddTips(FlatBufferBuilder builder, StringOffset TipsOffset) { builder.AddOffset(2, TipsOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(3, IconOffset.Value, 0); }
  public static void AddRankingMarker(FlatBufferBuilder builder, int RankingMarker) { builder.AddInt(4, RankingMarker, 0); }
  public static void AddItemId(FlatBufferBuilder builder, int ItemId) { builder.AddInt(5, ItemId, 0); }
  public static void AddRankingLevel(FlatBufferBuilder builder, int RankingLevel) { builder.AddInt(6, RankingLevel, 0); }
  public static void AddRankingRange(FlatBufferBuilder builder, VectorOffset RankingRangeOffset) { builder.AddOffset(7, RankingRangeOffset.Value, 0); }
  public static VectorOffset CreateRankingRangeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRankingRangeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRankingRangeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward1(FlatBufferBuilder builder, VectorOffset Reward1Offset) { builder.AddOffset(8, Reward1Offset.Value, 0); }
  public static VectorOffset CreateReward1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward2(FlatBufferBuilder builder, VectorOffset Reward2Offset) { builder.AddOffset(9, Reward2Offset.Value, 0); }
  public static VectorOffset CreateReward2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReward3(FlatBufferBuilder builder, VectorOffset Reward3Offset) { builder.AddOffset(10, Reward3Offset.Value, 0); }
  public static VectorOffset CreateReward3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateReward3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartReward3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RankConfigRowData> EndRankConfigRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RankConfigRowData>(o);
  }
};

public struct RankConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RankConfig GetRootAsRankConfig(ByteBuffer _bb) { return GetRootAsRankConfig(_bb, new RankConfig()); }
  public static RankConfig GetRootAsRankConfig(ByteBuffer _bb, RankConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RankConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RankConfigRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RankConfigRowData?)(new GameConfigs.RankConfigRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.RankConfig> CreateRankConfig(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RankConfig.AddDatalist(builder, datalistOffset);
    return RankConfig.EndRankConfig(builder);
  }

  public static void StartRankConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RankConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RankConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RankConfig> EndRankConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RankConfig>(o);
  }
  public static void FinishRankConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RankConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRankConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RankConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
