// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MachineStarRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MachineStarRowData GetRootAsMachineStarRowData(ByteBuffer _bb) { return GetRootAsMachineStarRowData(_bb, new MachineStarRowData()); }
  public static MachineStarRowData GetRootAsMachineStarRowData(ByteBuffer _bb, MachineStarRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MachineStarRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LevelId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MachineStar(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MachineStarLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetMachineStarBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetMachineStarBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetMachineStarArray() { return __p.__vector_as_array<int>(6); }
  public int StarReward(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int StarRewardLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetStarRewardBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetStarRewardBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetStarRewardArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<GameConfigs.MachineStarRowData> CreateMachineStarRowData(FlatBufferBuilder builder,
      int LevelId = 0,
      VectorOffset MachineStarOffset = default(VectorOffset),
      VectorOffset StarRewardOffset = default(VectorOffset)) {
    builder.StartTable(3);
    MachineStarRowData.AddStarReward(builder, StarRewardOffset);
    MachineStarRowData.AddMachineStar(builder, MachineStarOffset);
    MachineStarRowData.AddLevelId(builder, LevelId);
    return MachineStarRowData.EndMachineStarRowData(builder);
  }

  public static void StartMachineStarRowData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLevelId(FlatBufferBuilder builder, int LevelId) { builder.AddInt(0, LevelId, 0); }
  public static void AddMachineStar(FlatBufferBuilder builder, VectorOffset MachineStarOffset) { builder.AddOffset(1, MachineStarOffset.Value, 0); }
  public static VectorOffset CreateMachineStarVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMachineStarVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMachineStarVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStarReward(FlatBufferBuilder builder, VectorOffset StarRewardOffset) { builder.AddOffset(2, StarRewardOffset.Value, 0); }
  public static VectorOffset CreateStarRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStarRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStarRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.MachineStarRowData> EndMachineStarRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.MachineStarRowData>(o);
  }
};

public struct MachineStar : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static MachineStar GetRootAsMachineStar(ByteBuffer _bb) { return GetRootAsMachineStar(_bb, new MachineStar()); }
  public static MachineStar GetRootAsMachineStar(ByteBuffer _bb, MachineStar obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MachineStar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.MachineStarRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.MachineStarRowData?)(new GameConfigs.MachineStarRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.MachineStar> CreateMachineStar(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MachineStar.AddDatalist(builder, datalistOffset);
    return MachineStar.EndMachineStar(builder);
  }

  public static void StartMachineStar(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.MachineStarRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.MachineStarRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.MachineStar> EndMachineStar(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.MachineStar>(o);
  }
  public static void FinishMachineStarBuffer(FlatBufferBuilder builder, Offset<GameConfigs.MachineStar> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMachineStarBuffer(FlatBufferBuilder builder, Offset<GameConfigs.MachineStar> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
