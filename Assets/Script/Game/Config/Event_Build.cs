// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Event_BuildRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Event_BuildRowData GetRootAsEvent_BuildRowData(ByteBuffer _bb) { return GetRootAsEvent_BuildRowData(_bb, new Event_BuildRowData()); }
  public static Event_BuildRowData GetRootAsEvent_BuildRowData(ByteBuffer _bb, Event_BuildRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event_BuildRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventType { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuildLevelMax { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IfBuild { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuildId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuildIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBuildIdBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetBuildIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetBuildIdArray() { return __p.__vector_as_array<int>(12); }
  public int BuildLevelDefault { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.Event_BuildRowData> CreateEvent_BuildRowData(FlatBufferBuilder builder,
      int Id = 0,
      int EventType = 0,
      int BuildLevelMax = 0,
      int IfBuild = 0,
      VectorOffset BuildIdOffset = default(VectorOffset),
      int BuildLevelDefault = 0,
      int Priority = 0) {
    builder.StartTable(7);
    Event_BuildRowData.AddPriority(builder, Priority);
    Event_BuildRowData.AddBuildLevelDefault(builder, BuildLevelDefault);
    Event_BuildRowData.AddBuildId(builder, BuildIdOffset);
    Event_BuildRowData.AddIfBuild(builder, IfBuild);
    Event_BuildRowData.AddBuildLevelMax(builder, BuildLevelMax);
    Event_BuildRowData.AddEventType(builder, EventType);
    Event_BuildRowData.AddId(builder, Id);
    return Event_BuildRowData.EndEvent_BuildRowData(builder);
  }

  public static void StartEvent_BuildRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddEventType(FlatBufferBuilder builder, int EventType) { builder.AddInt(1, EventType, 0); }
  public static void AddBuildLevelMax(FlatBufferBuilder builder, int BuildLevelMax) { builder.AddInt(2, BuildLevelMax, 0); }
  public static void AddIfBuild(FlatBufferBuilder builder, int IfBuild) { builder.AddInt(3, IfBuild, 0); }
  public static void AddBuildId(FlatBufferBuilder builder, VectorOffset BuildIdOffset) { builder.AddOffset(4, BuildIdOffset.Value, 0); }
  public static VectorOffset CreateBuildIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuildIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBuildIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuildLevelDefault(FlatBufferBuilder builder, int BuildLevelDefault) { builder.AddInt(5, BuildLevelDefault, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(6, Priority, 0); }
  public static Offset<GameConfigs.Event_BuildRowData> EndEvent_BuildRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Event_BuildRowData>(o);
  }
};

public struct Event_Build : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Event_Build GetRootAsEvent_Build(ByteBuffer _bb) { return GetRootAsEvent_Build(_bb, new Event_Build()); }
  public static Event_Build GetRootAsEvent_Build(ByteBuffer _bb, Event_Build obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event_Build __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Event_BuildRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Event_BuildRowData?)(new GameConfigs.Event_BuildRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Event_Build> CreateEvent_Build(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Event_Build.AddDatalist(builder, datalistOffset);
    return Event_Build.EndEvent_Build(builder);
  }

  public static void StartEvent_Build(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Event_BuildRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Event_BuildRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Event_Build> EndEvent_Build(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Event_Build>(o);
  }
  public static void FinishEvent_BuildBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Event_Build> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEvent_BuildBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Event_Build> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
