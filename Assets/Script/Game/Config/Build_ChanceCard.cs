// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Build_ChanceCardRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Build_ChanceCardRowData GetRootAsBuild_ChanceCardRowData(ByteBuffer _bb) { return GetRootAsBuild_ChanceCardRowData(_bb, new Build_ChanceCardRowData()); }
  public static Build_ChanceCardRowData GetRootAsBuild_ChanceCardRowData(ByteBuffer _bb, Build_ChanceCardRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Build_ChanceCardRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BoardId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuildLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuildRes { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuildResBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBuildResBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBuildResArray() { return __p.__vector_as_array<byte>(10); }
  public int ItemId(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ItemIdLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItemIdBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetItemIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetItemIdArray() { return __p.__vector_as_array<int>(12); }
  public int ChanceCardWeight(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ChanceCardWeightLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetChanceCardWeightBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetChanceCardWeightBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetChanceCardWeightArray() { return __p.__vector_as_array<int>(14); }

  public static Offset<GameConfigs.Build_ChanceCardRowData> CreateBuild_ChanceCardRowData(FlatBufferBuilder builder,
      int Id = 0,
      int BoardId = 0,
      int BuildLevel = 0,
      StringOffset BuildResOffset = default(StringOffset),
      VectorOffset ItemIdOffset = default(VectorOffset),
      VectorOffset ChanceCardWeightOffset = default(VectorOffset)) {
    builder.StartTable(6);
    Build_ChanceCardRowData.AddChanceCardWeight(builder, ChanceCardWeightOffset);
    Build_ChanceCardRowData.AddItemId(builder, ItemIdOffset);
    Build_ChanceCardRowData.AddBuildRes(builder, BuildResOffset);
    Build_ChanceCardRowData.AddBuildLevel(builder, BuildLevel);
    Build_ChanceCardRowData.AddBoardId(builder, BoardId);
    Build_ChanceCardRowData.AddId(builder, Id);
    return Build_ChanceCardRowData.EndBuild_ChanceCardRowData(builder);
  }

  public static void StartBuild_ChanceCardRowData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddBoardId(FlatBufferBuilder builder, int BoardId) { builder.AddInt(1, BoardId, 0); }
  public static void AddBuildLevel(FlatBufferBuilder builder, int BuildLevel) { builder.AddInt(2, BuildLevel, 0); }
  public static void AddBuildRes(FlatBufferBuilder builder, StringOffset BuildResOffset) { builder.AddOffset(3, BuildResOffset.Value, 0); }
  public static void AddItemId(FlatBufferBuilder builder, VectorOffset ItemIdOffset) { builder.AddOffset(4, ItemIdOffset.Value, 0); }
  public static VectorOffset CreateItemIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItemIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItemIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChanceCardWeight(FlatBufferBuilder builder, VectorOffset ChanceCardWeightOffset) { builder.AddOffset(5, ChanceCardWeightOffset.Value, 0); }
  public static VectorOffset CreateChanceCardWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateChanceCardWeightVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChanceCardWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Build_ChanceCardRowData> EndBuild_ChanceCardRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Build_ChanceCardRowData>(o);
  }
};

public struct Build_ChanceCard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Build_ChanceCard GetRootAsBuild_ChanceCard(ByteBuffer _bb) { return GetRootAsBuild_ChanceCard(_bb, new Build_ChanceCard()); }
  public static Build_ChanceCard GetRootAsBuild_ChanceCard(ByteBuffer _bb, Build_ChanceCard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Build_ChanceCard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Build_ChanceCardRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Build_ChanceCardRowData?)(new GameConfigs.Build_ChanceCardRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Build_ChanceCard> CreateBuild_ChanceCard(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Build_ChanceCard.AddDatalist(builder, datalistOffset);
    return Build_ChanceCard.EndBuild_ChanceCard(builder);
  }

  public static void StartBuild_ChanceCard(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Build_ChanceCardRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Build_ChanceCardRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Build_ChanceCard> EndBuild_ChanceCard(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Build_ChanceCard>(o);
  }
  public static void FinishBuild_ChanceCardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Build_ChanceCard> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBuild_ChanceCardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Build_ChanceCard> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
