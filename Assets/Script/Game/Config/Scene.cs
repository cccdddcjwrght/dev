// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SceneRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SceneRowData GetRootAsSceneRowData(ByteBuffer _bb) { return GetRootAsSceneRowData(_bb, new SceneRowData()); }
  public static SceneRowData GetRootAsSceneRowData(ByteBuffer _bb, SceneRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SceneRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public string Preload(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PreloadLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Connect { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetConnectBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetConnectBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetConnectArray() { return __p.__vector_as_array<byte>(10); }
  public string Loading { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLoadingBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLoadingArray() { return __p.__vector_as_array<byte>(12); }
  public bool HasLoading { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string LoadingUI { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingUIBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetLoadingUIBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetLoadingUIArray() { return __p.__vector_as_array<byte>(16); }
  public int Type { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string FullPath { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFullPathBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetFullPathBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetFullPathArray() { return __p.__vector_as_array<byte>(20); }
  public string CameraCtr { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameraCtrBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetCameraCtrBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetCameraCtrArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<GameConfigs.SceneRowData> CreateSceneRowData(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      VectorOffset preloadOffset = default(VectorOffset),
      StringOffset connectOffset = default(StringOffset),
      StringOffset loadingOffset = default(StringOffset),
      bool hasLoading = false,
      StringOffset loadingUIOffset = default(StringOffset),
      int type = 0,
      StringOffset fullPathOffset = default(StringOffset),
      StringOffset CameraCtrOffset = default(StringOffset)) {
    builder.StartTable(10);
    SceneRowData.AddCameraCtr(builder, CameraCtrOffset);
    SceneRowData.AddFullPath(builder, fullPathOffset);
    SceneRowData.AddType(builder, type);
    SceneRowData.AddLoadingUI(builder, loadingUIOffset);
    SceneRowData.AddLoading(builder, loadingOffset);
    SceneRowData.AddConnect(builder, connectOffset);
    SceneRowData.AddPreload(builder, preloadOffset);
    SceneRowData.AddDesc(builder, descOffset);
    SceneRowData.AddName(builder, nameOffset);
    SceneRowData.AddHasLoading(builder, hasLoading);
    return SceneRowData.EndSceneRowData(builder);
  }

  public static void StartSceneRowData(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddPreload(FlatBufferBuilder builder, VectorOffset preloadOffset) { builder.AddOffset(2, preloadOffset.Value, 0); }
  public static VectorOffset CreatePreloadVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePreloadVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPreloadVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConnect(FlatBufferBuilder builder, StringOffset connectOffset) { builder.AddOffset(3, connectOffset.Value, 0); }
  public static void AddLoading(FlatBufferBuilder builder, StringOffset loadingOffset) { builder.AddOffset(4, loadingOffset.Value, 0); }
  public static void AddHasLoading(FlatBufferBuilder builder, bool hasLoading) { builder.AddBool(5, hasLoading, false); }
  public static void AddLoadingUI(FlatBufferBuilder builder, StringOffset loadingUIOffset) { builder.AddOffset(6, loadingUIOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(7, type, 0); }
  public static void AddFullPath(FlatBufferBuilder builder, StringOffset fullPathOffset) { builder.AddOffset(8, fullPathOffset.Value, 0); }
  public static void AddCameraCtr(FlatBufferBuilder builder, StringOffset CameraCtrOffset) { builder.AddOffset(9, CameraCtrOffset.Value, 0); }
  public static Offset<GameConfigs.SceneRowData> EndSceneRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.SceneRowData>(o);
  }
};

public struct Scene : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Scene GetRootAsScene(ByteBuffer _bb) { return GetRootAsScene(_bb, new Scene()); }
  public static Scene GetRootAsScene(ByteBuffer _bb, Scene obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Scene __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.SceneRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.SceneRowData?)(new GameConfigs.SceneRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Scene> CreateScene(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Scene.AddDatalist(builder, datalistOffset);
    return Scene.EndScene(builder);
  }

  public static void StartScene(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.SceneRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.SceneRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Scene> EndScene(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Scene>(o);
  }
  public static void FinishSceneBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Scene> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSceneBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Scene> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
