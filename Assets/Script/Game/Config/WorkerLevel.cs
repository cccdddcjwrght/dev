// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct WorkerLevelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static WorkerLevelRowData GetRootAsWorkerLevelRowData(ByteBuffer _bb) { return GetRootAsWorkerLevelRowData(_bb, new WorkerLevelRowData()); }
  public static WorkerLevelRowData GetRootAsWorkerLevelRowData(ByteBuffer _bb, WorkerLevelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorkerLevelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int WorkerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float UpgradePrice { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GameConfigs.WorkerLevelRowData> CreateWorkerLevelRowData(FlatBufferBuilder builder,
      int WorkerId = 0,
      int Level = 0,
      float UpgradePrice = 0.0f) {
    builder.StartTable(3);
    WorkerLevelRowData.AddUpgradePrice(builder, UpgradePrice);
    WorkerLevelRowData.AddLevel(builder, Level);
    WorkerLevelRowData.AddWorkerId(builder, WorkerId);
    return WorkerLevelRowData.EndWorkerLevelRowData(builder);
  }

  public static void StartWorkerLevelRowData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddWorkerId(FlatBufferBuilder builder, int WorkerId) { builder.AddInt(0, WorkerId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(1, Level, 0); }
  public static void AddUpgradePrice(FlatBufferBuilder builder, float UpgradePrice) { builder.AddFloat(2, UpgradePrice, 0.0f); }
  public static Offset<GameConfigs.WorkerLevelRowData> EndWorkerLevelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.WorkerLevelRowData>(o);
  }
};

public struct WorkerLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static WorkerLevel GetRootAsWorkerLevel(ByteBuffer _bb) { return GetRootAsWorkerLevel(_bb, new WorkerLevel()); }
  public static WorkerLevel GetRootAsWorkerLevel(ByteBuffer _bb, WorkerLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorkerLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.WorkerLevelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.WorkerLevelRowData?)(new GameConfigs.WorkerLevelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.WorkerLevel> CreateWorkerLevel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    WorkerLevel.AddDatalist(builder, datalistOffset);
    return WorkerLevel.EndWorkerLevel(builder);
  }

  public static void StartWorkerLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.WorkerLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.WorkerLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.WorkerLevel> EndWorkerLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.WorkerLevel>(o);
  }
  public static void FinishWorkerLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.WorkerLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedWorkerLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.WorkerLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
