// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Likes_JackpotRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Likes_JackpotRowData GetRootAsLikes_JackpotRowData(ByteBuffer _bb) { return GetRootAsLikes_JackpotRowData(_bb, new Likes_JackpotRowData()); }
  public static Likes_JackpotRowData GetRootAsLikes_JackpotRowData(ByteBuffer _bb, Likes_JackpotRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Likes_JackpotRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardBytes() { return __p.__vector_as_span<int>(6, 4); }
#else
  public ArraySegment<byte>? GetRewardBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetRewardArray() { return __p.__vector_as_array<int>(6); }
  public int ConditionType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionValue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Weight { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.Likes_JackpotRowData> CreateLikes_JackpotRowData(FlatBufferBuilder builder,
      int Id = 0,
      VectorOffset RewardOffset = default(VectorOffset),
      int ConditionType = 0,
      int ConditionValue = 0,
      int Weight = 0) {
    builder.StartTable(5);
    Likes_JackpotRowData.AddWeight(builder, Weight);
    Likes_JackpotRowData.AddConditionValue(builder, ConditionValue);
    Likes_JackpotRowData.AddConditionType(builder, ConditionType);
    Likes_JackpotRowData.AddReward(builder, RewardOffset);
    Likes_JackpotRowData.AddId(builder, Id);
    return Likes_JackpotRowData.EndLikes_JackpotRowData(builder);
  }

  public static void StartLikes_JackpotRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddReward(FlatBufferBuilder builder, VectorOffset RewardOffset) { builder.AddOffset(1, RewardOffset.Value, 0); }
  public static VectorOffset CreateRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionType(FlatBufferBuilder builder, int ConditionType) { builder.AddInt(2, ConditionType, 0); }
  public static void AddConditionValue(FlatBufferBuilder builder, int ConditionValue) { builder.AddInt(3, ConditionValue, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(4, Weight, 0); }
  public static Offset<GameConfigs.Likes_JackpotRowData> EndLikes_JackpotRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Likes_JackpotRowData>(o);
  }
};

public struct Likes_Jackpot : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Likes_Jackpot GetRootAsLikes_Jackpot(ByteBuffer _bb) { return GetRootAsLikes_Jackpot(_bb, new Likes_Jackpot()); }
  public static Likes_Jackpot GetRootAsLikes_Jackpot(ByteBuffer _bb, Likes_Jackpot obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Likes_Jackpot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Likes_JackpotRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Likes_JackpotRowData?)(new GameConfigs.Likes_JackpotRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Likes_Jackpot> CreateLikes_Jackpot(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Likes_Jackpot.AddDatalist(builder, datalistOffset);
    return Likes_Jackpot.EndLikes_Jackpot(builder);
  }

  public static void StartLikes_Jackpot(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Likes_JackpotRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Likes_JackpotRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Likes_Jackpot> EndLikes_Jackpot(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Likes_Jackpot>(o);
  }
  public static void FinishLikes_JackpotBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Likes_Jackpot> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLikes_JackpotBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Likes_Jackpot> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
