// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomTechRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomTechRowData GetRootAsRoomTechRowData(ByteBuffer _bb) { return GetRootAsRoomTechRowData(_bb, new RoomTechRowData()); }
  public static RoomTechRowData GetRootAsRoomTechRowData(ByteBuffer _bb, RoomTechRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomTechRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Room { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MachineId { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Value { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TableId(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TableIdLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTableIdBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetTableIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetTableIdArray() { return __p.__vector_as_array<int>(16); }
  public int RoleId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(20); }
  public string Des { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetDesBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetDesArray() { return __p.__vector_as_array<byte>(22); }
  public string Icon { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(24); }
  public int Mark { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCostBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetCostBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetCostArray() { return __p.__vector_as_array<int>(28); }
  public string Effects { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectsBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetEffectsBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetEffectsArray() { return __p.__vector_as_array<byte>(30); }

  public static Offset<GameConfigs.RoomTechRowData> CreateRoomTechRowData(FlatBufferBuilder builder,
      int Id = 0,
      int Type = 0,
      int Room = 0,
      int BuffId = 0,
      int MachineId = 0,
      int Value = 0,
      VectorOffset TableIdOffset = default(VectorOffset),
      int RoleId = 0,
      StringOffset NameOffset = default(StringOffset),
      StringOffset DesOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      int Mark = 0,
      VectorOffset CostOffset = default(VectorOffset),
      StringOffset EffectsOffset = default(StringOffset)) {
    builder.StartTable(14);
    RoomTechRowData.AddEffects(builder, EffectsOffset);
    RoomTechRowData.AddCost(builder, CostOffset);
    RoomTechRowData.AddMark(builder, Mark);
    RoomTechRowData.AddIcon(builder, IconOffset);
    RoomTechRowData.AddDes(builder, DesOffset);
    RoomTechRowData.AddName(builder, NameOffset);
    RoomTechRowData.AddRoleId(builder, RoleId);
    RoomTechRowData.AddTableId(builder, TableIdOffset);
    RoomTechRowData.AddValue(builder, Value);
    RoomTechRowData.AddMachineId(builder, MachineId);
    RoomTechRowData.AddBuffId(builder, BuffId);
    RoomTechRowData.AddRoom(builder, Room);
    RoomTechRowData.AddType(builder, Type);
    RoomTechRowData.AddId(builder, Id);
    return RoomTechRowData.EndRoomTechRowData(builder);
  }

  public static void StartRoomTechRowData(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(1, Type, 0); }
  public static void AddRoom(FlatBufferBuilder builder, int Room) { builder.AddInt(2, Room, 0); }
  public static void AddBuffId(FlatBufferBuilder builder, int BuffId) { builder.AddInt(3, BuffId, 0); }
  public static void AddMachineId(FlatBufferBuilder builder, int MachineId) { builder.AddInt(4, MachineId, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(5, Value, 0); }
  public static void AddTableId(FlatBufferBuilder builder, VectorOffset TableIdOffset) { builder.AddOffset(6, TableIdOffset.Value, 0); }
  public static VectorOffset CreateTableIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTableIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTableIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRoleId(FlatBufferBuilder builder, int RoleId) { builder.AddInt(7, RoleId, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(8, NameOffset.Value, 0); }
  public static void AddDes(FlatBufferBuilder builder, StringOffset DesOffset) { builder.AddOffset(9, DesOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(10, IconOffset.Value, 0); }
  public static void AddMark(FlatBufferBuilder builder, int Mark) { builder.AddInt(11, Mark, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset CostOffset) { builder.AddOffset(12, CostOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEffects(FlatBufferBuilder builder, StringOffset EffectsOffset) { builder.AddOffset(13, EffectsOffset.Value, 0); }
  public static Offset<GameConfigs.RoomTechRowData> EndRoomTechRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomTechRowData>(o);
  }
};

public struct RoomTech : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomTech GetRootAsRoomTech(ByteBuffer _bb) { return GetRootAsRoomTech(_bb, new RoomTech()); }
  public static RoomTech GetRootAsRoomTech(ByteBuffer _bb, RoomTech obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomTech __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RoomTechRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RoomTechRowData?)(new GameConfigs.RoomTechRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.RoomTech> CreateRoomTech(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RoomTech.AddDatalist(builder, datalistOffset);
    return RoomTech.EndRoomTech(builder);
  }

  public static void StartRoomTech(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RoomTechRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RoomTechRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RoomTech> EndRoomTech(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomTech>(o);
  }
  public static void FinishRoomTechBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomTech> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoomTechBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomTech> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
