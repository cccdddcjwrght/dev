// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BulletRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BulletRowData GetRootAsBulletRowData(ByteBuffer _bb) { return GetRootAsBulletRowData(_bb, new BulletRowData()); }
  public static BulletRowData GetRootAsBulletRowData(ByteBuffer _bb, BulletRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BulletRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Resource { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetResourceBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetResourceArray() { return __p.__vector_as_array<byte>(6); }
  public string BulletEffectId { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBulletEffectIdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetBulletEffectIdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetBulletEffectIdArray() { return __p.__vector_as_array<byte>(8); }
  public string HitEffectId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHitEffectIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetHitEffectIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetHitEffectIdArray() { return __p.__vector_as_array<byte>(10); }
  public string BulletSpeed { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBulletSpeedBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBulletSpeedBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBulletSpeedArray() { return __p.__vector_as_array<byte>(12); }
  public int Timing(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TimingLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTimingBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetTimingBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetTimingArray() { return __p.__vector_as_array<int>(14); }

  public static Offset<GameConfigs.BulletRowData> CreateBulletRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset ResourceOffset = default(StringOffset),
      StringOffset BulletEffectIdOffset = default(StringOffset),
      StringOffset HitEffectIdOffset = default(StringOffset),
      StringOffset BulletSpeedOffset = default(StringOffset),
      VectorOffset TimingOffset = default(VectorOffset)) {
    builder.StartTable(6);
    BulletRowData.AddTiming(builder, TimingOffset);
    BulletRowData.AddBulletSpeed(builder, BulletSpeedOffset);
    BulletRowData.AddHitEffectId(builder, HitEffectIdOffset);
    BulletRowData.AddBulletEffectId(builder, BulletEffectIdOffset);
    BulletRowData.AddResource(builder, ResourceOffset);
    BulletRowData.AddId(builder, Id);
    return BulletRowData.EndBulletRowData(builder);
  }

  public static void StartBulletRowData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddResource(FlatBufferBuilder builder, StringOffset ResourceOffset) { builder.AddOffset(1, ResourceOffset.Value, 0); }
  public static void AddBulletEffectId(FlatBufferBuilder builder, StringOffset BulletEffectIdOffset) { builder.AddOffset(2, BulletEffectIdOffset.Value, 0); }
  public static void AddHitEffectId(FlatBufferBuilder builder, StringOffset HitEffectIdOffset) { builder.AddOffset(3, HitEffectIdOffset.Value, 0); }
  public static void AddBulletSpeed(FlatBufferBuilder builder, StringOffset BulletSpeedOffset) { builder.AddOffset(4, BulletSpeedOffset.Value, 0); }
  public static void AddTiming(FlatBufferBuilder builder, VectorOffset TimingOffset) { builder.AddOffset(5, TimingOffset.Value, 0); }
  public static VectorOffset CreateTimingVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTimingVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTimingVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.BulletRowData> EndBulletRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.BulletRowData>(o);
  }
};

public struct Bullet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Bullet GetRootAsBullet(ByteBuffer _bb) { return GetRootAsBullet(_bb, new Bullet()); }
  public static Bullet GetRootAsBullet(ByteBuffer _bb, Bullet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bullet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.BulletRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.BulletRowData?)(new GameConfigs.BulletRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Bullet> CreateBullet(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Bullet.AddDatalist(builder, datalistOffset);
    return Bullet.EndBullet(builder);
  }

  public static void StartBullet(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.BulletRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.BulletRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Bullet> EndBullet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Bullet>(o);
  }
  public static void FinishBulletBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Bullet> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBulletBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Bullet> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
