// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomMachineRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomMachineRowData GetRootAsRoomMachineRowData(ByteBuffer _bb) { return GetRootAsRoomMachineRowData(_bb, new RoomMachineRowData()); }
  public static RoomMachineRowData GetRootAsRoomMachineRowData(ByteBuffer _bb, RoomMachineRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomMachineRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Scene { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Machine { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MachineLevelMax { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Nowork { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Enable { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Depends(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DependsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDependsBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetDependsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetDependsArray() { return __p.__vector_as_array<int>(18); }
  public int ObjId(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ObjIdLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetObjIdBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetObjIdBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetObjIdArray() { return __p.__vector_as_array<int>(20); }
  public string Tags(int j) { int o = __p.__offset(22); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string LinkTags(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int LinkTagsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string TipsAsset { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTipsAssetBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetTipsAssetBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetTipsAssetArray() { return __p.__vector_as_array<byte>(26); }
  public int HudOffset(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int HudOffsetLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetHudOffsetBytes() { return __p.__vector_as_span<int>(28, 4); }
#else
  public ArraySegment<byte>? GetHudOffsetBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public int[] GetHudOffsetArray() { return __p.__vector_as_array<int>(28); }
  public int Walkable { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActiveEffect { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.RoomMachineRowData> CreateRoomMachineRowData(FlatBufferBuilder builder,
      int ID = 0,
      int Scene = 0,
      int Type = 0,
      int Machine = 0,
      int MachineLevelMax = 0,
      int Nowork = 0,
      int Enable = 0,
      VectorOffset DependsOffset = default(VectorOffset),
      VectorOffset ObjIdOffset = default(VectorOffset),
      VectorOffset TagsOffset = default(VectorOffset),
      VectorOffset LinkTagsOffset = default(VectorOffset),
      StringOffset TipsAssetOffset = default(StringOffset),
      VectorOffset HudOffsetOffset = default(VectorOffset),
      int Walkable = 0,
      int ActiveEffect = 0) {
    builder.StartTable(15);
    RoomMachineRowData.AddActiveEffect(builder, ActiveEffect);
    RoomMachineRowData.AddWalkable(builder, Walkable);
    RoomMachineRowData.AddHudOffset(builder, HudOffsetOffset);
    RoomMachineRowData.AddTipsAsset(builder, TipsAssetOffset);
    RoomMachineRowData.AddLinkTags(builder, LinkTagsOffset);
    RoomMachineRowData.AddTags(builder, TagsOffset);
    RoomMachineRowData.AddObjId(builder, ObjIdOffset);
    RoomMachineRowData.AddDepends(builder, DependsOffset);
    RoomMachineRowData.AddEnable(builder, Enable);
    RoomMachineRowData.AddNowork(builder, Nowork);
    RoomMachineRowData.AddMachineLevelMax(builder, MachineLevelMax);
    RoomMachineRowData.AddMachine(builder, Machine);
    RoomMachineRowData.AddType(builder, Type);
    RoomMachineRowData.AddScene(builder, Scene);
    RoomMachineRowData.AddID(builder, ID);
    return RoomMachineRowData.EndRoomMachineRowData(builder);
  }

  public static void StartRoomMachineRowData(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddScene(FlatBufferBuilder builder, int Scene) { builder.AddInt(1, Scene, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(2, Type, 0); }
  public static void AddMachine(FlatBufferBuilder builder, int Machine) { builder.AddInt(3, Machine, 0); }
  public static void AddMachineLevelMax(FlatBufferBuilder builder, int MachineLevelMax) { builder.AddInt(4, MachineLevelMax, 0); }
  public static void AddNowork(FlatBufferBuilder builder, int Nowork) { builder.AddInt(5, Nowork, 0); }
  public static void AddEnable(FlatBufferBuilder builder, int Enable) { builder.AddInt(6, Enable, 0); }
  public static void AddDepends(FlatBufferBuilder builder, VectorOffset DependsOffset) { builder.AddOffset(7, DependsOffset.Value, 0); }
  public static VectorOffset CreateDependsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDependsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDependsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddObjId(FlatBufferBuilder builder, VectorOffset ObjIdOffset) { builder.AddOffset(8, ObjIdOffset.Value, 0); }
  public static VectorOffset CreateObjIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateObjIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartObjIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset TagsOffset) { builder.AddOffset(9, TagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLinkTags(FlatBufferBuilder builder, VectorOffset LinkTagsOffset) { builder.AddOffset(10, LinkTagsOffset.Value, 0); }
  public static VectorOffset CreateLinkTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateLinkTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLinkTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTipsAsset(FlatBufferBuilder builder, StringOffset TipsAssetOffset) { builder.AddOffset(11, TipsAssetOffset.Value, 0); }
  public static void AddHudOffset(FlatBufferBuilder builder, VectorOffset HudOffsetOffset) { builder.AddOffset(12, HudOffsetOffset.Value, 0); }
  public static VectorOffset CreateHudOffsetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHudOffsetVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartHudOffsetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWalkable(FlatBufferBuilder builder, int Walkable) { builder.AddInt(13, Walkable, 0); }
  public static void AddActiveEffect(FlatBufferBuilder builder, int ActiveEffect) { builder.AddInt(14, ActiveEffect, 0); }
  public static Offset<GameConfigs.RoomMachineRowData> EndRoomMachineRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomMachineRowData>(o);
  }
};

public struct RoomMachine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomMachine GetRootAsRoomMachine(ByteBuffer _bb) { return GetRootAsRoomMachine(_bb, new RoomMachine()); }
  public static RoomMachine GetRootAsRoomMachine(ByteBuffer _bb, RoomMachine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomMachine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RoomMachineRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RoomMachineRowData?)(new GameConfigs.RoomMachineRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.RoomMachine> CreateRoomMachine(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RoomMachine.AddDatalist(builder, datalistOffset);
    return RoomMachine.EndRoomMachine(builder);
  }

  public static void StartRoomMachine(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachineRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachineRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RoomMachine> EndRoomMachine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomMachine>(o);
  }
  public static void FinishRoomMachineBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachine> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoomMachineBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachine> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
