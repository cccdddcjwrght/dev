// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomMachineRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomMachineRowData GetRootAsRoomMachineRowData(ByteBuffer _bb) { return GetRootAsRoomMachineRowData(_bb, new RoomMachineRowData()); }
  public static RoomMachineRowData GetRootAsRoomMachineRowData(ByteBuffer _bb, RoomMachineRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomMachineRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Scene { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Machine { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ObjId { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.RoomMachineRowData> CreateRoomMachineRowData(FlatBufferBuilder builder,
      int ID = 0,
      int Scene = 0,
      int Machine = 0,
      int ObjId = 0) {
    builder.StartTable(4);
    RoomMachineRowData.AddObjId(builder, ObjId);
    RoomMachineRowData.AddMachine(builder, Machine);
    RoomMachineRowData.AddScene(builder, Scene);
    RoomMachineRowData.AddID(builder, ID);
    return RoomMachineRowData.EndRoomMachineRowData(builder);
  }

  public static void StartRoomMachineRowData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddScene(FlatBufferBuilder builder, int Scene) { builder.AddInt(1, Scene, 0); }
  public static void AddMachine(FlatBufferBuilder builder, int Machine) { builder.AddInt(2, Machine, 0); }
  public static void AddObjId(FlatBufferBuilder builder, int ObjId) { builder.AddInt(3, ObjId, 0); }
  public static Offset<GameConfigs.RoomMachineRowData> EndRoomMachineRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomMachineRowData>(o);
  }
};

public struct RoomMachine : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomMachine GetRootAsRoomMachine(ByteBuffer _bb) { return GetRootAsRoomMachine(_bb, new RoomMachine()); }
  public static RoomMachine GetRootAsRoomMachine(ByteBuffer _bb, RoomMachine obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomMachine __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RoomMachineRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RoomMachineRowData?)(new GameConfigs.RoomMachineRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.RoomMachine> CreateRoomMachine(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RoomMachine.AddDatalist(builder, datalistOffset);
    return RoomMachine.EndRoomMachine(builder);
  }

  public static void StartRoomMachine(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachineRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachineRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RoomMachine> EndRoomMachine(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomMachine>(o);
  }
  public static void FinishRoomMachineBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachine> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoomMachineBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomMachine> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
