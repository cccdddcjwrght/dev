// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ExploreToolLevelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ExploreToolLevelRowData GetRootAsExploreToolLevelRowData(ByteBuffer _bb) { return GetRootAsExploreToolLevelRowData(_bb, new ExploreToolLevelRowData()); }
  public static ExploreToolLevelRowData GetRootAsExploreToolLevelRowData(ByteBuffer _bb, ExploreToolLevelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreToolLevelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCostBytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetCostBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetCostArray() { return __p.__vector_as_array<int>(8); }
  public int Time { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ADTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TypeWeight(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TypeWeightLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTypeWeightBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetTypeWeightBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetTypeWeightArray() { return __p.__vector_as_array<int>(14); }
  public int QualityWeight(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int QualityWeightLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetQualityWeightBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetQualityWeightBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetQualityWeightArray() { return __p.__vector_as_array<int>(16); }
  public int FortifyChance { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExploreLevel { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.ExploreToolLevelRowData> CreateExploreToolLevelRowData(FlatBufferBuilder builder,
      int Id = 0,
      int MapId = 0,
      VectorOffset CostOffset = default(VectorOffset),
      int Time = 0,
      int ADTime = 0,
      VectorOffset TypeWeightOffset = default(VectorOffset),
      VectorOffset QualityWeightOffset = default(VectorOffset),
      int FortifyChance = 0,
      int ExploreLevel = 0) {
    builder.StartTable(9);
    ExploreToolLevelRowData.AddExploreLevel(builder, ExploreLevel);
    ExploreToolLevelRowData.AddFortifyChance(builder, FortifyChance);
    ExploreToolLevelRowData.AddQualityWeight(builder, QualityWeightOffset);
    ExploreToolLevelRowData.AddTypeWeight(builder, TypeWeightOffset);
    ExploreToolLevelRowData.AddADTime(builder, ADTime);
    ExploreToolLevelRowData.AddTime(builder, Time);
    ExploreToolLevelRowData.AddCost(builder, CostOffset);
    ExploreToolLevelRowData.AddMapId(builder, MapId);
    ExploreToolLevelRowData.AddId(builder, Id);
    return ExploreToolLevelRowData.EndExploreToolLevelRowData(builder);
  }

  public static void StartExploreToolLevelRowData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddMapId(FlatBufferBuilder builder, int MapId) { builder.AddInt(1, MapId, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset CostOffset) { builder.AddOffset(2, CostOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTime(FlatBufferBuilder builder, int Time) { builder.AddInt(3, Time, 0); }
  public static void AddADTime(FlatBufferBuilder builder, int ADTime) { builder.AddInt(4, ADTime, 0); }
  public static void AddTypeWeight(FlatBufferBuilder builder, VectorOffset TypeWeightOffset) { builder.AddOffset(5, TypeWeightOffset.Value, 0); }
  public static VectorOffset CreateTypeWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTypeWeightVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTypeWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddQualityWeight(FlatBufferBuilder builder, VectorOffset QualityWeightOffset) { builder.AddOffset(6, QualityWeightOffset.Value, 0); }
  public static VectorOffset CreateQualityWeightVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateQualityWeightVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartQualityWeightVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFortifyChance(FlatBufferBuilder builder, int FortifyChance) { builder.AddInt(7, FortifyChance, 0); }
  public static void AddExploreLevel(FlatBufferBuilder builder, int ExploreLevel) { builder.AddInt(8, ExploreLevel, 0); }
  public static Offset<GameConfigs.ExploreToolLevelRowData> EndExploreToolLevelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ExploreToolLevelRowData>(o);
  }
};

public struct ExploreToolLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ExploreToolLevel GetRootAsExploreToolLevel(ByteBuffer _bb) { return GetRootAsExploreToolLevel(_bb, new ExploreToolLevel()); }
  public static ExploreToolLevel GetRootAsExploreToolLevel(ByteBuffer _bb, ExploreToolLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ExploreToolLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ExploreToolLevelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ExploreToolLevelRowData?)(new GameConfigs.ExploreToolLevelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ExploreToolLevel> CreateExploreToolLevel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ExploreToolLevel.AddDatalist(builder, datalistOffset);
    return ExploreToolLevel.EndExploreToolLevel(builder);
  }

  public static void StartExploreToolLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ExploreToolLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ExploreToolLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ExploreToolLevel> EndExploreToolLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ExploreToolLevel>(o);
  }
  public static void FinishExploreToolLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ExploreToolLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedExploreToolLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ExploreToolLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
