// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct LevelPathRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static LevelPathRowData GetRootAsLevelPathRowData(ByteBuffer _bb) { return GetRootAsLevelPathRowData(_bb, new LevelPathRowData()); }
  public static LevelPathRowData GetRootAsLevelPathRowData(ByteBuffer _bb, LevelPathRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LevelPathRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PathTag { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathTagBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPathTagBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPathTagArray() { return __p.__vector_as_array<byte>(6); }
  public float OrderPosition(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int OrderPositionLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetOrderPositionBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetOrderPositionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetOrderPositionArray() { return __p.__vector_as_array<float>(8); }
  public int MachineID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Gap { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GameConfigs.LevelPathRowData> CreateLevelPathRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset PathTagOffset = default(StringOffset),
      VectorOffset OrderPositionOffset = default(VectorOffset),
      int MachineID = 0,
      float gap = 0.0f) {
    builder.StartTable(5);
    LevelPathRowData.AddGap(builder, gap);
    LevelPathRowData.AddMachineID(builder, MachineID);
    LevelPathRowData.AddOrderPosition(builder, OrderPositionOffset);
    LevelPathRowData.AddPathTag(builder, PathTagOffset);
    LevelPathRowData.AddId(builder, Id);
    return LevelPathRowData.EndLevelPathRowData(builder);
  }

  public static void StartLevelPathRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddPathTag(FlatBufferBuilder builder, StringOffset PathTagOffset) { builder.AddOffset(1, PathTagOffset.Value, 0); }
  public static void AddOrderPosition(FlatBufferBuilder builder, VectorOffset OrderPositionOffset) { builder.AddOffset(2, OrderPositionOffset.Value, 0); }
  public static VectorOffset CreateOrderPositionVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOrderPositionVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOrderPositionVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMachineID(FlatBufferBuilder builder, int MachineID) { builder.AddInt(3, MachineID, 0); }
  public static void AddGap(FlatBufferBuilder builder, float gap) { builder.AddFloat(4, gap, 0.0f); }
  public static Offset<GameConfigs.LevelPathRowData> EndLevelPathRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.LevelPathRowData>(o);
  }
};

public struct LevelPath : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static LevelPath GetRootAsLevelPath(ByteBuffer _bb) { return GetRootAsLevelPath(_bb, new LevelPath()); }
  public static LevelPath GetRootAsLevelPath(ByteBuffer _bb, LevelPath obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LevelPath __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.LevelPathRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.LevelPathRowData?)(new GameConfigs.LevelPathRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.LevelPath> CreateLevelPath(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LevelPath.AddDatalist(builder, datalistOffset);
    return LevelPath.EndLevelPath(builder);
  }

  public static void StartLevelPath(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.LevelPathRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.LevelPathRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.LevelPath> EndLevelPath(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.LevelPath>(o);
  }
  public static void FinishLevelPathBuffer(FlatBufferBuilder builder, Offset<GameConfigs.LevelPath> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLevelPathBuffer(FlatBufferBuilder builder, Offset<GameConfigs.LevelPath> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
