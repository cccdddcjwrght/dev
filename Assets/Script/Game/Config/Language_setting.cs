// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Language_settingRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Language_settingRowData GetRootAsLanguage_settingRowData(ByteBuffer _bb) { return GetRootAsLanguage_settingRowData(_bb, new Language_settingRowData()); }
  public static Language_settingRowData GetRootAsLanguage_settingRowData(ByteBuffer _bb, Language_settingRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Language_settingRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LanguageID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ResLanguage { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResLanguageBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetResLanguageBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetResLanguageArray() { return __p.__vector_as_array<byte>(6); }
  public string Label { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GameConfigs.Language_settingRowData> CreateLanguage_settingRowData(FlatBufferBuilder builder,
      int LanguageID = 0,
      StringOffset ResLanguageOffset = default(StringOffset),
      StringOffset LabelOffset = default(StringOffset)) {
    builder.StartTable(3);
    Language_settingRowData.AddLabel(builder, LabelOffset);
    Language_settingRowData.AddResLanguage(builder, ResLanguageOffset);
    Language_settingRowData.AddLanguageID(builder, LanguageID);
    return Language_settingRowData.EndLanguage_settingRowData(builder);
  }

  public static void StartLanguage_settingRowData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLanguageID(FlatBufferBuilder builder, int LanguageID) { builder.AddInt(0, LanguageID, 0); }
  public static void AddResLanguage(FlatBufferBuilder builder, StringOffset ResLanguageOffset) { builder.AddOffset(1, ResLanguageOffset.Value, 0); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset LabelOffset) { builder.AddOffset(2, LabelOffset.Value, 0); }
  public static Offset<GameConfigs.Language_settingRowData> EndLanguage_settingRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Language_settingRowData>(o);
  }
};

public struct Language_setting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Language_setting GetRootAsLanguage_setting(ByteBuffer _bb) { return GetRootAsLanguage_setting(_bb, new Language_setting()); }
  public static Language_setting GetRootAsLanguage_setting(ByteBuffer _bb, Language_setting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Language_setting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Language_settingRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Language_settingRowData?)(new GameConfigs.Language_settingRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Language_setting> CreateLanguage_setting(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Language_setting.AddDatalist(builder, datalistOffset);
    return Language_setting.EndLanguage_setting(builder);
  }

  public static void StartLanguage_setting(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Language_settingRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Language_settingRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Language_setting> EndLanguage_setting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Language_setting>(o);
  }
  public static void FinishLanguage_settingBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Language_setting> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedLanguage_settingBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Language_setting> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
