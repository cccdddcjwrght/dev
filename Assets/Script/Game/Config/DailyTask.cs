// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct DailyTaskRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DailyTaskRowData GetRootAsDailyTaskRowData(ByteBuffer _bb) { return GetRootAsDailyTaskRowData(_bb, new DailyTaskRowData()); }
  public static DailyTaskRowData GetRootAsDailyTaskRowData(ByteBuffer _bb, DailyTaskRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DailyTaskRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TaskDes { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTaskDesBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTaskDesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTaskDesArray() { return __p.__vector_as_array<byte>(6); }
  public int TaskType { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CountType { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskValue(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TaskValueLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTaskValueBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetTaskValueBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetTaskValueArray() { return __p.__vector_as_array<int>(12); }
  public int TaskReward { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GuideId { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ProgressType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TaskUnlock(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TaskUnlockLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTaskUnlockBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetTaskUnlockBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetTaskUnlockArray() { return __p.__vector_as_array<int>(20); }
  public int Weight { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.DailyTaskRowData> CreateDailyTaskRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset TaskDesOffset = default(StringOffset),
      int TaskType = 0,
      int CountType = 0,
      VectorOffset TaskValueOffset = default(VectorOffset),
      int TaskReward = 0,
      int GuideId = 0,
      int ProgressType = 0,
      VectorOffset TaskUnlockOffset = default(VectorOffset),
      int Weight = 0) {
    builder.StartTable(10);
    DailyTaskRowData.AddWeight(builder, Weight);
    DailyTaskRowData.AddTaskUnlock(builder, TaskUnlockOffset);
    DailyTaskRowData.AddProgressType(builder, ProgressType);
    DailyTaskRowData.AddGuideId(builder, GuideId);
    DailyTaskRowData.AddTaskReward(builder, TaskReward);
    DailyTaskRowData.AddTaskValue(builder, TaskValueOffset);
    DailyTaskRowData.AddCountType(builder, CountType);
    DailyTaskRowData.AddTaskType(builder, TaskType);
    DailyTaskRowData.AddTaskDes(builder, TaskDesOffset);
    DailyTaskRowData.AddId(builder, Id);
    return DailyTaskRowData.EndDailyTaskRowData(builder);
  }

  public static void StartDailyTaskRowData(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddTaskDes(FlatBufferBuilder builder, StringOffset TaskDesOffset) { builder.AddOffset(1, TaskDesOffset.Value, 0); }
  public static void AddTaskType(FlatBufferBuilder builder, int TaskType) { builder.AddInt(2, TaskType, 0); }
  public static void AddCountType(FlatBufferBuilder builder, int CountType) { builder.AddInt(3, CountType, 0); }
  public static void AddTaskValue(FlatBufferBuilder builder, VectorOffset TaskValueOffset) { builder.AddOffset(4, TaskValueOffset.Value, 0); }
  public static VectorOffset CreateTaskValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTaskValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTaskValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTaskReward(FlatBufferBuilder builder, int TaskReward) { builder.AddInt(5, TaskReward, 0); }
  public static void AddGuideId(FlatBufferBuilder builder, int GuideId) { builder.AddInt(6, GuideId, 0); }
  public static void AddProgressType(FlatBufferBuilder builder, int ProgressType) { builder.AddInt(7, ProgressType, 0); }
  public static void AddTaskUnlock(FlatBufferBuilder builder, VectorOffset TaskUnlockOffset) { builder.AddOffset(8, TaskUnlockOffset.Value, 0); }
  public static VectorOffset CreateTaskUnlockVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTaskUnlockVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTaskUnlockVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(9, Weight, 0); }
  public static Offset<GameConfigs.DailyTaskRowData> EndDailyTaskRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.DailyTaskRowData>(o);
  }
};

public struct DailyTask : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static DailyTask GetRootAsDailyTask(ByteBuffer _bb) { return GetRootAsDailyTask(_bb, new DailyTask()); }
  public static DailyTask GetRootAsDailyTask(ByteBuffer _bb, DailyTask obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DailyTask __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.DailyTaskRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.DailyTaskRowData?)(new GameConfigs.DailyTaskRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.DailyTask> CreateDailyTask(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DailyTask.AddDatalist(builder, datalistOffset);
    return DailyTask.EndDailyTask(builder);
  }

  public static void StartDailyTask(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.DailyTaskRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.DailyTaskRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.DailyTask> EndDailyTask(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.DailyTask>(o);
  }
  public static void FinishDailyTaskBuffer(FlatBufferBuilder builder, Offset<GameConfigs.DailyTask> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDailyTaskBuffer(FlatBufferBuilder builder, Offset<GameConfigs.DailyTask> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
