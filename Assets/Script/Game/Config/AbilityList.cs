// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct AbilityListRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AbilityListRowData GetRootAsAbilityListRowData(ByteBuffer _bb) { return GetRootAsAbilityListRowData(_bb, new AbilityListRowData()); }
  public static AbilityListRowData GetRootAsAbilityListRowData(ByteBuffer _bb, AbilityListRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbilityListRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string VaultName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVaultNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetVaultNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetVaultNameArray() { return __p.__vector_as_array<byte>(6); }
  public string VaultIcon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVaultIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetVaultIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetVaultIconArray() { return __p.__vector_as_array<byte>(8); }
  public string VaultDes { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetVaultDesBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetVaultDesBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetVaultDesArray() { return __p.__vector_as_array<byte>(10); }
  public int VaultLevelMax { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelId(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int LevelIdLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetLevelIdBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetLevelIdBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetLevelIdArray() { return __p.__vector_as_array<int>(14); }
  public int Sort { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.AbilityListRowData> CreateAbilityListRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset VaultNameOffset = default(StringOffset),
      StringOffset VaultIconOffset = default(StringOffset),
      StringOffset VaultDesOffset = default(StringOffset),
      int VaultLevelMax = 0,
      VectorOffset LevelIdOffset = default(VectorOffset),
      int sort = 0) {
    builder.StartTable(7);
    AbilityListRowData.AddSort(builder, sort);
    AbilityListRowData.AddLevelId(builder, LevelIdOffset);
    AbilityListRowData.AddVaultLevelMax(builder, VaultLevelMax);
    AbilityListRowData.AddVaultDes(builder, VaultDesOffset);
    AbilityListRowData.AddVaultIcon(builder, VaultIconOffset);
    AbilityListRowData.AddVaultName(builder, VaultNameOffset);
    AbilityListRowData.AddId(builder, Id);
    return AbilityListRowData.EndAbilityListRowData(builder);
  }

  public static void StartAbilityListRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddVaultName(FlatBufferBuilder builder, StringOffset VaultNameOffset) { builder.AddOffset(1, VaultNameOffset.Value, 0); }
  public static void AddVaultIcon(FlatBufferBuilder builder, StringOffset VaultIconOffset) { builder.AddOffset(2, VaultIconOffset.Value, 0); }
  public static void AddVaultDes(FlatBufferBuilder builder, StringOffset VaultDesOffset) { builder.AddOffset(3, VaultDesOffset.Value, 0); }
  public static void AddVaultLevelMax(FlatBufferBuilder builder, int VaultLevelMax) { builder.AddInt(4, VaultLevelMax, 0); }
  public static void AddLevelId(FlatBufferBuilder builder, VectorOffset LevelIdOffset) { builder.AddOffset(5, LevelIdOffset.Value, 0); }
  public static VectorOffset CreateLevelIdVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateLevelIdVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartLevelIdVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(6, sort, 0); }
  public static Offset<GameConfigs.AbilityListRowData> EndAbilityListRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.AbilityListRowData>(o);
  }
};

public struct AbilityList : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static AbilityList GetRootAsAbilityList(ByteBuffer _bb) { return GetRootAsAbilityList(_bb, new AbilityList()); }
  public static AbilityList GetRootAsAbilityList(ByteBuffer _bb, AbilityList obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AbilityList __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.AbilityListRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.AbilityListRowData?)(new GameConfigs.AbilityListRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.AbilityList> CreateAbilityList(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AbilityList.AddDatalist(builder, datalistOffset);
    return AbilityList.EndAbilityList(builder);
  }

  public static void StartAbilityList(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.AbilityListRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.AbilityListRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.AbilityList> EndAbilityList(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.AbilityList>(o);
  }
  public static void FinishAbilityListBuffer(FlatBufferBuilder builder, Offset<GameConfigs.AbilityList> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedAbilityListBuffer(FlatBufferBuilder builder, Offset<GameConfigs.AbilityList> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
