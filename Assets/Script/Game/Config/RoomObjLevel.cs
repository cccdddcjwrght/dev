// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomObjLevelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomObjLevelRowData GetRootAsRoomObjLevelRowData(ByteBuffer _bb) { return GetRootAsRoomObjLevelRowData(_bb, new RoomObjLevelRowData()); }
  public static RoomObjLevelRowData GetRootAsRoomObjLevelRowData(ByteBuffer _bb, RoomObjLevelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomObjLevelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Star { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Cost(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int CostLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<float> GetCostBytes() { return __p.__vector_as_span<float>(8, 4); }
#else
  public ArraySegment<byte>? GetCostBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetCostArray() { return __p.__vector_as_array<float>(8); }
  public int Buff(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBuffBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetBuffBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetBuffArray() { return __p.__vector_as_array<int>(10); }
  public int ChefNum { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WaiterNum { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CustomerNum { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SetNum { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Condition { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PartNum { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowNum { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShowType { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.RoomObjLevelRowData> CreateRoomObjLevelRowData(FlatBufferBuilder builder,
      int ID = 0,
      int Star = 0,
      VectorOffset CostOffset = default(VectorOffset),
      VectorOffset BuffOffset = default(VectorOffset),
      int ChefNum = 0,
      int WaiterNum = 0,
      int CustomerNum = 0,
      int SetNum = 0,
      int Condition = 0,
      int PartNum = 0,
      int ShowNum = 0,
      int ShowType = 0) {
    builder.StartTable(12);
    RoomObjLevelRowData.AddShowType(builder, ShowType);
    RoomObjLevelRowData.AddShowNum(builder, ShowNum);
    RoomObjLevelRowData.AddPartNum(builder, PartNum);
    RoomObjLevelRowData.AddCondition(builder, Condition);
    RoomObjLevelRowData.AddSetNum(builder, SetNum);
    RoomObjLevelRowData.AddCustomerNum(builder, CustomerNum);
    RoomObjLevelRowData.AddWaiterNum(builder, WaiterNum);
    RoomObjLevelRowData.AddChefNum(builder, ChefNum);
    RoomObjLevelRowData.AddBuff(builder, BuffOffset);
    RoomObjLevelRowData.AddCost(builder, CostOffset);
    RoomObjLevelRowData.AddStar(builder, Star);
    RoomObjLevelRowData.AddID(builder, ID);
    return RoomObjLevelRowData.EndRoomObjLevelRowData(builder);
  }

  public static void StartRoomObjLevelRowData(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddStar(FlatBufferBuilder builder, int Star) { builder.AddInt(1, Star, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset CostOffset) { builder.AddOffset(2, CostOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuff(FlatBufferBuilder builder, VectorOffset BuffOffset) { builder.AddOffset(3, BuffOffset.Value, 0); }
  public static VectorOffset CreateBuffVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBuffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChefNum(FlatBufferBuilder builder, int ChefNum) { builder.AddInt(4, ChefNum, 0); }
  public static void AddWaiterNum(FlatBufferBuilder builder, int WaiterNum) { builder.AddInt(5, WaiterNum, 0); }
  public static void AddCustomerNum(FlatBufferBuilder builder, int CustomerNum) { builder.AddInt(6, CustomerNum, 0); }
  public static void AddSetNum(FlatBufferBuilder builder, int SetNum) { builder.AddInt(7, SetNum, 0); }
  public static void AddCondition(FlatBufferBuilder builder, int Condition) { builder.AddInt(8, Condition, 0); }
  public static void AddPartNum(FlatBufferBuilder builder, int PartNum) { builder.AddInt(9, PartNum, 0); }
  public static void AddShowNum(FlatBufferBuilder builder, int ShowNum) { builder.AddInt(10, ShowNum, 0); }
  public static void AddShowType(FlatBufferBuilder builder, int ShowType) { builder.AddInt(11, ShowType, 0); }
  public static Offset<GameConfigs.RoomObjLevelRowData> EndRoomObjLevelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomObjLevelRowData>(o);
  }
};

public struct RoomObjLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomObjLevel GetRootAsRoomObjLevel(ByteBuffer _bb) { return GetRootAsRoomObjLevel(_bb, new RoomObjLevel()); }
  public static RoomObjLevel GetRootAsRoomObjLevel(ByteBuffer _bb, RoomObjLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomObjLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RoomObjLevelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RoomObjLevelRowData?)(new GameConfigs.RoomObjLevelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.RoomObjLevel> CreateRoomObjLevel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RoomObjLevel.AddDatalist(builder, datalistOffset);
    return RoomObjLevel.EndRoomObjLevel(builder);
  }

  public static void StartRoomObjLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RoomObjLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RoomObjLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RoomObjLevel> EndRoomObjLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomObjLevel>(o);
  }
  public static void FinishRoomObjLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomObjLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoomObjLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomObjLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
