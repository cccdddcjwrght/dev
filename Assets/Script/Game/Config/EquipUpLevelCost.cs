// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct EquipUpLevelCostRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EquipUpLevelCostRowData GetRootAsEquipUpLevelCostRowData(ByteBuffer _bb) { return GetRootAsEquipUpLevelCostRowData(_bb, new EquipUpLevelCostRowData()); }
  public static EquipUpLevelCostRowData GetRootAsEquipUpLevelCostRowData(ByteBuffer _bb, EquipUpLevelCostRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EquipUpLevelCostRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Level { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality1Need { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality2Need { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality3Need { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality4Need { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality5Need { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality6Need { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality7Need { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality8Need { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality9Need { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality10Need { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality11Need { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Quality12Need { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.EquipUpLevelCostRowData> CreateEquipUpLevelCostRowData(FlatBufferBuilder builder,
      int level = 0,
      int Quality1Need = 0,
      int Quality2Need = 0,
      int Quality3Need = 0,
      int Quality4Need = 0,
      int Quality5Need = 0,
      int Quality6Need = 0,
      int Quality7Need = 0,
      int Quality8Need = 0,
      int Quality9Need = 0,
      int Quality10Need = 0,
      int Quality11Need = 0,
      int Quality12Need = 0) {
    builder.StartTable(13);
    EquipUpLevelCostRowData.AddQuality12Need(builder, Quality12Need);
    EquipUpLevelCostRowData.AddQuality11Need(builder, Quality11Need);
    EquipUpLevelCostRowData.AddQuality10Need(builder, Quality10Need);
    EquipUpLevelCostRowData.AddQuality9Need(builder, Quality9Need);
    EquipUpLevelCostRowData.AddQuality8Need(builder, Quality8Need);
    EquipUpLevelCostRowData.AddQuality7Need(builder, Quality7Need);
    EquipUpLevelCostRowData.AddQuality6Need(builder, Quality6Need);
    EquipUpLevelCostRowData.AddQuality5Need(builder, Quality5Need);
    EquipUpLevelCostRowData.AddQuality4Need(builder, Quality4Need);
    EquipUpLevelCostRowData.AddQuality3Need(builder, Quality3Need);
    EquipUpLevelCostRowData.AddQuality2Need(builder, Quality2Need);
    EquipUpLevelCostRowData.AddQuality1Need(builder, Quality1Need);
    EquipUpLevelCostRowData.AddLevel(builder, level);
    return EquipUpLevelCostRowData.EndEquipUpLevelCostRowData(builder);
  }

  public static void StartEquipUpLevelCostRowData(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddLevel(FlatBufferBuilder builder, int level) { builder.AddInt(0, level, 0); }
  public static void AddQuality1Need(FlatBufferBuilder builder, int Quality1Need) { builder.AddInt(1, Quality1Need, 0); }
  public static void AddQuality2Need(FlatBufferBuilder builder, int Quality2Need) { builder.AddInt(2, Quality2Need, 0); }
  public static void AddQuality3Need(FlatBufferBuilder builder, int Quality3Need) { builder.AddInt(3, Quality3Need, 0); }
  public static void AddQuality4Need(FlatBufferBuilder builder, int Quality4Need) { builder.AddInt(4, Quality4Need, 0); }
  public static void AddQuality5Need(FlatBufferBuilder builder, int Quality5Need) { builder.AddInt(5, Quality5Need, 0); }
  public static void AddQuality6Need(FlatBufferBuilder builder, int Quality6Need) { builder.AddInt(6, Quality6Need, 0); }
  public static void AddQuality7Need(FlatBufferBuilder builder, int Quality7Need) { builder.AddInt(7, Quality7Need, 0); }
  public static void AddQuality8Need(FlatBufferBuilder builder, int Quality8Need) { builder.AddInt(8, Quality8Need, 0); }
  public static void AddQuality9Need(FlatBufferBuilder builder, int Quality9Need) { builder.AddInt(9, Quality9Need, 0); }
  public static void AddQuality10Need(FlatBufferBuilder builder, int Quality10Need) { builder.AddInt(10, Quality10Need, 0); }
  public static void AddQuality11Need(FlatBufferBuilder builder, int Quality11Need) { builder.AddInt(11, Quality11Need, 0); }
  public static void AddQuality12Need(FlatBufferBuilder builder, int Quality12Need) { builder.AddInt(12, Quality12Need, 0); }
  public static Offset<GameConfigs.EquipUpLevelCostRowData> EndEquipUpLevelCostRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.EquipUpLevelCostRowData>(o);
  }
};

public struct EquipUpLevelCost : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static EquipUpLevelCost GetRootAsEquipUpLevelCost(ByteBuffer _bb) { return GetRootAsEquipUpLevelCost(_bb, new EquipUpLevelCost()); }
  public static EquipUpLevelCost GetRootAsEquipUpLevelCost(ByteBuffer _bb, EquipUpLevelCost obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EquipUpLevelCost __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.EquipUpLevelCostRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.EquipUpLevelCostRowData?)(new GameConfigs.EquipUpLevelCostRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.EquipUpLevelCost> CreateEquipUpLevelCost(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EquipUpLevelCost.AddDatalist(builder, datalistOffset);
    return EquipUpLevelCost.EndEquipUpLevelCost(builder);
  }

  public static void StartEquipUpLevelCost(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.EquipUpLevelCostRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.EquipUpLevelCostRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.EquipUpLevelCost> EndEquipUpLevelCost(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.EquipUpLevelCost>(o);
  }
  public static void FinishEquipUpLevelCostBuffer(FlatBufferBuilder builder, Offset<GameConfigs.EquipUpLevelCost> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEquipUpLevelCostBuffer(FlatBufferBuilder builder, Offset<GameConfigs.EquipUpLevelCost> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
