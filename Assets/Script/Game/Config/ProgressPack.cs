// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ProgressPackRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ProgressPackRowData GetRootAsProgressPackRowData(ByteBuffer _bb) { return GetRootAsProgressPackRowData(_bb, new ProgressPackRowData()); }
  public static ProgressPackRowData GetRootAsProgressPackRowData(ByteBuffer _bb, ProgressPackRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProgressPackRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShopId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Des { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDesBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDesArray() { return __p.__vector_as_array<byte>(8); }
  public int Pay { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Value { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetRewardBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetRewardArray() { return __p.__vector_as_array<int>(16); }
  public int ActiveID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.ProgressPackRowData> CreateProgressPackRowData(FlatBufferBuilder builder,
      int Id = 0,
      int ShopId = 0,
      StringOffset DesOffset = default(StringOffset),
      int Pay = 0,
      int Type = 0,
      int Value = 0,
      VectorOffset RewardOffset = default(VectorOffset),
      int activeID = 0) {
    builder.StartTable(8);
    ProgressPackRowData.AddActiveID(builder, activeID);
    ProgressPackRowData.AddReward(builder, RewardOffset);
    ProgressPackRowData.AddValue(builder, Value);
    ProgressPackRowData.AddType(builder, Type);
    ProgressPackRowData.AddPay(builder, Pay);
    ProgressPackRowData.AddDes(builder, DesOffset);
    ProgressPackRowData.AddShopId(builder, ShopId);
    ProgressPackRowData.AddId(builder, Id);
    return ProgressPackRowData.EndProgressPackRowData(builder);
  }

  public static void StartProgressPackRowData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddShopId(FlatBufferBuilder builder, int ShopId) { builder.AddInt(1, ShopId, 0); }
  public static void AddDes(FlatBufferBuilder builder, StringOffset DesOffset) { builder.AddOffset(2, DesOffset.Value, 0); }
  public static void AddPay(FlatBufferBuilder builder, int Pay) { builder.AddInt(3, Pay, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(4, Type, 0); }
  public static void AddValue(FlatBufferBuilder builder, int Value) { builder.AddInt(5, Value, 0); }
  public static void AddReward(FlatBufferBuilder builder, VectorOffset RewardOffset) { builder.AddOffset(6, RewardOffset.Value, 0); }
  public static VectorOffset CreateRewardVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddActiveID(FlatBufferBuilder builder, int activeID) { builder.AddInt(7, activeID, 0); }
  public static Offset<GameConfigs.ProgressPackRowData> EndProgressPackRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ProgressPackRowData>(o);
  }
};

public struct ProgressPack : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ProgressPack GetRootAsProgressPack(ByteBuffer _bb) { return GetRootAsProgressPack(_bb, new ProgressPack()); }
  public static ProgressPack GetRootAsProgressPack(ByteBuffer _bb, ProgressPack obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProgressPack __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ProgressPackRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ProgressPackRowData?)(new GameConfigs.ProgressPackRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ProgressPack> CreateProgressPack(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ProgressPack.AddDatalist(builder, datalistOffset);
    return ProgressPack.EndProgressPack(builder);
  }

  public static void StartProgressPack(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ProgressPackRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ProgressPackRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ProgressPack> EndProgressPack(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ProgressPack>(o);
  }
  public static void FinishProgressPackBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ProgressPack> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedProgressPackBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ProgressPack> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
