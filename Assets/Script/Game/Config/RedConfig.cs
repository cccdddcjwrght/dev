// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RedConfigRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RedConfigRowData GetRootAsRedConfigRowData(ByteBuffer _bb) { return GetRootAsRedConfigRowData(_bb, new RedConfigRowData()); }
  public static RedConfigRowData GetRootAsRedConfigRowData(ByteBuffer _bb, RedConfigRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RedConfigRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(8); }
  public int Depends(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int DependsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetDependsBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetDependsBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetDependsArray() { return __p.__vector_as_array<int>(10); }
  public int DependFuncID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Args(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ArgsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetArgsBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetArgsBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetArgsArray() { return __p.__vector_as_array<int>(16); }
  public int SubType { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventIDs(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EventIDsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetEventIDsBytes() { return __p.__vector_as_span<int>(20, 4); }
#else
  public ArraySegment<byte>? GetEventIDsBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public int[] GetEventIDsArray() { return __p.__vector_as_array<int>(20); }
  public string Ui { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUiBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetUiBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetUiArray() { return __p.__vector_as_array<byte>(22); }
  public string Path { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(24); }
  public string Filter { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFilterBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetFilterBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetFilterArray() { return __p.__vector_as_array<byte>(26); }
  public int Postion { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Offset(int j) { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OffsetLength { get { int o = __p.__offset(30); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetOffsetBytes() { return __p.__vector_as_span<int>(30, 4); }
#else
  public ArraySegment<byte>? GetOffsetBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public int[] GetOffsetArray() { return __p.__vector_as_array<int>(30); }
  public string Res { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetResBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetResArray() { return __p.__vector_as_array<byte>(32); }
  public string Ctr { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCtrBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetCtrBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetCtrArray() { return __p.__vector_as_array<byte>(34); }
  public int Interval { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Childname { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChildnameBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetChildnameBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetChildnameArray() { return __p.__vector_as_array<byte>(38); }
  public int Closeui { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Gotoui { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGotouiBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetGotouiBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetGotouiArray() { return __p.__vector_as_array<byte>(42); }

  public static Offset<GameConfigs.RedConfigRowData> CreateRedConfigRowData(FlatBufferBuilder builder,
      int id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset descOffset = default(StringOffset),
      VectorOffset dependsOffset = default(VectorOffset),
      int dependFuncID = 0,
      int type = 0,
      VectorOffset argsOffset = default(VectorOffset),
      int subType = 0,
      VectorOffset eventIDsOffset = default(VectorOffset),
      StringOffset uiOffset = default(StringOffset),
      StringOffset pathOffset = default(StringOffset),
      StringOffset filterOffset = default(StringOffset),
      int postion = 0,
      VectorOffset offsetOffset = default(VectorOffset),
      StringOffset resOffset = default(StringOffset),
      StringOffset ctrOffset = default(StringOffset),
      int interval = 0,
      StringOffset childnameOffset = default(StringOffset),
      int closeui = 0,
      StringOffset gotouiOffset = default(StringOffset)) {
    builder.StartTable(20);
    RedConfigRowData.AddGotoui(builder, gotouiOffset);
    RedConfigRowData.AddCloseui(builder, closeui);
    RedConfigRowData.AddChildname(builder, childnameOffset);
    RedConfigRowData.AddInterval(builder, interval);
    RedConfigRowData.AddCtr(builder, ctrOffset);
    RedConfigRowData.AddRes(builder, resOffset);
    RedConfigRowData.AddOffset(builder, offsetOffset);
    RedConfigRowData.AddPostion(builder, postion);
    RedConfigRowData.AddFilter(builder, filterOffset);
    RedConfigRowData.AddPath(builder, pathOffset);
    RedConfigRowData.AddUi(builder, uiOffset);
    RedConfigRowData.AddEventIDs(builder, eventIDsOffset);
    RedConfigRowData.AddSubType(builder, subType);
    RedConfigRowData.AddArgs(builder, argsOffset);
    RedConfigRowData.AddType(builder, type);
    RedConfigRowData.AddDependFuncID(builder, dependFuncID);
    RedConfigRowData.AddDepends(builder, dependsOffset);
    RedConfigRowData.AddDesc(builder, descOffset);
    RedConfigRowData.AddName(builder, nameOffset);
    RedConfigRowData.AddId(builder, id);
    return RedConfigRowData.EndRedConfigRowData(builder);
  }

  public static void StartRedConfigRowData(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(2, descOffset.Value, 0); }
  public static void AddDepends(FlatBufferBuilder builder, VectorOffset dependsOffset) { builder.AddOffset(3, dependsOffset.Value, 0); }
  public static VectorOffset CreateDependsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDependsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDependsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDependFuncID(FlatBufferBuilder builder, int dependFuncID) { builder.AddInt(4, dependFuncID, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(5, type, 0); }
  public static void AddArgs(FlatBufferBuilder builder, VectorOffset argsOffset) { builder.AddOffset(6, argsOffset.Value, 0); }
  public static VectorOffset CreateArgsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateArgsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartArgsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubType(FlatBufferBuilder builder, int subType) { builder.AddInt(7, subType, 0); }
  public static void AddEventIDs(FlatBufferBuilder builder, VectorOffset eventIDsOffset) { builder.AddOffset(8, eventIDsOffset.Value, 0); }
  public static VectorOffset CreateEventIDsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEventIDsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEventIDsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddUi(FlatBufferBuilder builder, StringOffset uiOffset) { builder.AddOffset(9, uiOffset.Value, 0); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(10, pathOffset.Value, 0); }
  public static void AddFilter(FlatBufferBuilder builder, StringOffset filterOffset) { builder.AddOffset(11, filterOffset.Value, 0); }
  public static void AddPostion(FlatBufferBuilder builder, int postion) { builder.AddInt(12, postion, 0); }
  public static void AddOffset(FlatBufferBuilder builder, VectorOffset offsetOffset) { builder.AddOffset(13, offsetOffset.Value, 0); }
  public static VectorOffset CreateOffsetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOffsetVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOffsetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRes(FlatBufferBuilder builder, StringOffset resOffset) { builder.AddOffset(14, resOffset.Value, 0); }
  public static void AddCtr(FlatBufferBuilder builder, StringOffset ctrOffset) { builder.AddOffset(15, ctrOffset.Value, 0); }
  public static void AddInterval(FlatBufferBuilder builder, int interval) { builder.AddInt(16, interval, 0); }
  public static void AddChildname(FlatBufferBuilder builder, StringOffset childnameOffset) { builder.AddOffset(17, childnameOffset.Value, 0); }
  public static void AddCloseui(FlatBufferBuilder builder, int closeui) { builder.AddInt(18, closeui, 0); }
  public static void AddGotoui(FlatBufferBuilder builder, StringOffset gotouiOffset) { builder.AddOffset(19, gotouiOffset.Value, 0); }
  public static Offset<GameConfigs.RedConfigRowData> EndRedConfigRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RedConfigRowData>(o);
  }
};

public struct RedConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RedConfig GetRootAsRedConfig(ByteBuffer _bb) { return GetRootAsRedConfig(_bb, new RedConfig()); }
  public static RedConfig GetRootAsRedConfig(ByteBuffer _bb, RedConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RedConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RedConfigRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RedConfigRowData?)(new GameConfigs.RedConfigRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.RedConfig> CreateRedConfig(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RedConfig.AddDatalist(builder, datalistOffset);
    return RedConfig.EndRedConfig(builder);
  }

  public static void StartRedConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RedConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RedConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RedConfig> EndRedConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RedConfig>(o);
  }
  public static void FinishRedConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RedConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRedConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RedConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
