// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ClubRewardRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ClubRewardRowData GetRootAsClubRewardRowData(ByteBuffer _bb) { return GetRootAsClubRewardRowData(_bb, new ClubRewardRowData()); }
  public static ClubRewardRowData GetRootAsClubRewardRowData(ByteBuffer _bb, ClubRewardRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ClubRewardRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Periods { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Target(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TargetLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetTargetBytes() { return __p.__vector_as_span<int>(10, 4); }
#else
  public ArraySegment<byte>? GetTargetBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public int[] GetTargetArray() { return __p.__vector_as_array<int>(10); }
  public int Item1(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Item1Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItem1Bytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetItem1Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetItem1Array() { return __p.__vector_as_array<int>(12); }
  public int Item2(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Item2Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItem2Bytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetItem2Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetItem2Array() { return __p.__vector_as_array<int>(14); }
  public int Buff(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuffLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBuffBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetBuffBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetBuffArray() { return __p.__vector_as_array<int>(16); }

  public static Offset<GameConfigs.ClubRewardRowData> CreateClubRewardRowData(FlatBufferBuilder builder,
      int Id = 0,
      int Periods = 0,
      int Level = 0,
      VectorOffset TargetOffset = default(VectorOffset),
      VectorOffset Item1Offset = default(VectorOffset),
      VectorOffset Item2Offset = default(VectorOffset),
      VectorOffset BuffOffset = default(VectorOffset)) {
    builder.StartTable(7);
    ClubRewardRowData.AddBuff(builder, BuffOffset);
    ClubRewardRowData.AddItem2(builder, Item2Offset);
    ClubRewardRowData.AddItem1(builder, Item1Offset);
    ClubRewardRowData.AddTarget(builder, TargetOffset);
    ClubRewardRowData.AddLevel(builder, Level);
    ClubRewardRowData.AddPeriods(builder, Periods);
    ClubRewardRowData.AddId(builder, Id);
    return ClubRewardRowData.EndClubRewardRowData(builder);
  }

  public static void StartClubRewardRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddPeriods(FlatBufferBuilder builder, int Periods) { builder.AddInt(1, Periods, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddTarget(FlatBufferBuilder builder, VectorOffset TargetOffset) { builder.AddOffset(3, TargetOffset.Value, 0); }
  public static VectorOffset CreateTargetVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTargetVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTargetVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItem1(FlatBufferBuilder builder, VectorOffset Item1Offset) { builder.AddOffset(4, Item1Offset.Value, 0); }
  public static VectorOffset CreateItem1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItem1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItem1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItem2(FlatBufferBuilder builder, VectorOffset Item2Offset) { builder.AddOffset(5, Item2Offset.Value, 0); }
  public static VectorOffset CreateItem2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItem2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItem2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuff(FlatBufferBuilder builder, VectorOffset BuffOffset) { builder.AddOffset(6, BuffOffset.Value, 0); }
  public static VectorOffset CreateBuffVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuffVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBuffVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ClubRewardRowData> EndClubRewardRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ClubRewardRowData>(o);
  }
};

public struct ClubReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ClubReward GetRootAsClubReward(ByteBuffer _bb) { return GetRootAsClubReward(_bb, new ClubReward()); }
  public static ClubReward GetRootAsClubReward(ByteBuffer _bb, ClubReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ClubReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ClubRewardRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ClubRewardRowData?)(new GameConfigs.ClubRewardRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.ClubReward> CreateClubReward(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ClubReward.AddDatalist(builder, datalistOffset);
    return ClubReward.EndClubReward(builder);
  }

  public static void StartClubReward(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ClubRewardRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ClubRewardRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.ClubReward> EndClubReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ClubReward>(o);
  }
  public static void FinishClubRewardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ClubReward> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedClubRewardBuffer(FlatBufferBuilder builder, Offset<GameConfigs.ClubReward> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
