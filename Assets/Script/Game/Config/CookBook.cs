// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CookBookRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CookBookRowData GetRootAsCookBookRowData(ByteBuffer _bb) { return GetRootAsCookBookRowData(_bb, new CookBookRowData()); }
  public static CookBookRowData GetRootAsCookBookRowData(ByteBuffer _bb, CookBookRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CookBookRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CookId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Level { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Star { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Cost(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int CostLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetCostBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetCostBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetCostArray() { return __p.__vector_as_array<int>(12); }
  public int ConditionType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ConditionValue(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ConditionValueLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetConditionValueBytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetConditionValueBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetConditionValueArray() { return __p.__vector_as_array<int>(16); }
  public int Map { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Price { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Time { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.CookBookRowData> CreateCookBookRowData(FlatBufferBuilder builder,
      int Id = 0,
      int CookId = 0,
      int Level = 0,
      int Star = 0,
      VectorOffset CostOffset = default(VectorOffset),
      int ConditionType = 0,
      VectorOffset ConditionValueOffset = default(VectorOffset),
      int Map = 0,
      int Price = 0,
      int Time = 0) {
    builder.StartTable(10);
    CookBookRowData.AddTime(builder, Time);
    CookBookRowData.AddPrice(builder, Price);
    CookBookRowData.AddMap(builder, Map);
    CookBookRowData.AddConditionValue(builder, ConditionValueOffset);
    CookBookRowData.AddConditionType(builder, ConditionType);
    CookBookRowData.AddCost(builder, CostOffset);
    CookBookRowData.AddStar(builder, Star);
    CookBookRowData.AddLevel(builder, Level);
    CookBookRowData.AddCookId(builder, CookId);
    CookBookRowData.AddId(builder, Id);
    return CookBookRowData.EndCookBookRowData(builder);
  }

  public static void StartCookBookRowData(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddCookId(FlatBufferBuilder builder, int CookId) { builder.AddInt(1, CookId, 0); }
  public static void AddLevel(FlatBufferBuilder builder, int Level) { builder.AddInt(2, Level, 0); }
  public static void AddStar(FlatBufferBuilder builder, int Star) { builder.AddInt(3, Star, 0); }
  public static void AddCost(FlatBufferBuilder builder, VectorOffset CostOffset) { builder.AddOffset(4, CostOffset.Value, 0); }
  public static VectorOffset CreateCostVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCostVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartCostVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddConditionType(FlatBufferBuilder builder, int ConditionType) { builder.AddInt(5, ConditionType, 0); }
  public static void AddConditionValue(FlatBufferBuilder builder, VectorOffset ConditionValueOffset) { builder.AddOffset(6, ConditionValueOffset.Value, 0); }
  public static VectorOffset CreateConditionValueVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateConditionValueVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartConditionValueVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMap(FlatBufferBuilder builder, int Map) { builder.AddInt(7, Map, 0); }
  public static void AddPrice(FlatBufferBuilder builder, int Price) { builder.AddInt(8, Price, 0); }
  public static void AddTime(FlatBufferBuilder builder, int Time) { builder.AddInt(9, Time, 0); }
  public static Offset<GameConfigs.CookBookRowData> EndCookBookRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.CookBookRowData>(o);
  }
};

public struct CookBook : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CookBook GetRootAsCookBook(ByteBuffer _bb) { return GetRootAsCookBook(_bb, new CookBook()); }
  public static CookBook GetRootAsCookBook(ByteBuffer _bb, CookBook obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CookBook __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.CookBookRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.CookBookRowData?)(new GameConfigs.CookBookRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.CookBook> CreateCookBook(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CookBook.AddDatalist(builder, datalistOffset);
    return CookBook.EndCookBook(builder);
  }

  public static void StartCookBook(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.CookBookRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.CookBookRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.CookBook> EndCookBook(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.CookBook>(o);
  }
  public static void FinishCookBookBuffer(FlatBufferBuilder builder, Offset<GameConfigs.CookBook> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCookBookBuffer(FlatBufferBuilder builder, Offset<GameConfigs.CookBook> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
