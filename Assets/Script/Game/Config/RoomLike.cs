// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RoomLikeRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomLikeRowData GetRootAsRoomLikeRowData(ByteBuffer _bb) { return GetRootAsRoomLikeRowData(_bb, new RoomLikeRowData()); }
  public static RoomLikeRowData GetRootAsRoomLikeRowData(ByteBuffer _bb, RoomLikeRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomLikeRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LikeId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BuffName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetBuffNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetBuffNameArray() { return __p.__vector_as_array<byte>(8); }
  public string BuffDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBuffDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBuffDescArray() { return __p.__vector_as_array<byte>(10); }
  public string BuffIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuffIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetBuffIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetBuffIconArray() { return __p.__vector_as_array<byte>(12); }
  public int BuffMark { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffValue { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffDuration { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Weight { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.RoomLikeRowData> CreateRoomLikeRowData(FlatBufferBuilder builder,
      int LikeId = 0,
      int BuffId = 0,
      StringOffset BuffNameOffset = default(StringOffset),
      StringOffset BuffDescOffset = default(StringOffset),
      StringOffset BuffIconOffset = default(StringOffset),
      int BuffMark = 0,
      int buffValue = 0,
      int BuffDuration = 0,
      int Weight = 0) {
    builder.StartTable(9);
    RoomLikeRowData.AddWeight(builder, Weight);
    RoomLikeRowData.AddBuffDuration(builder, BuffDuration);
    RoomLikeRowData.AddBuffValue(builder, buffValue);
    RoomLikeRowData.AddBuffMark(builder, BuffMark);
    RoomLikeRowData.AddBuffIcon(builder, BuffIconOffset);
    RoomLikeRowData.AddBuffDesc(builder, BuffDescOffset);
    RoomLikeRowData.AddBuffName(builder, BuffNameOffset);
    RoomLikeRowData.AddBuffId(builder, BuffId);
    RoomLikeRowData.AddLikeId(builder, LikeId);
    return RoomLikeRowData.EndRoomLikeRowData(builder);
  }

  public static void StartRoomLikeRowData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddLikeId(FlatBufferBuilder builder, int LikeId) { builder.AddInt(0, LikeId, 0); }
  public static void AddBuffId(FlatBufferBuilder builder, int BuffId) { builder.AddInt(1, BuffId, 0); }
  public static void AddBuffName(FlatBufferBuilder builder, StringOffset BuffNameOffset) { builder.AddOffset(2, BuffNameOffset.Value, 0); }
  public static void AddBuffDesc(FlatBufferBuilder builder, StringOffset BuffDescOffset) { builder.AddOffset(3, BuffDescOffset.Value, 0); }
  public static void AddBuffIcon(FlatBufferBuilder builder, StringOffset BuffIconOffset) { builder.AddOffset(4, BuffIconOffset.Value, 0); }
  public static void AddBuffMark(FlatBufferBuilder builder, int BuffMark) { builder.AddInt(5, BuffMark, 0); }
  public static void AddBuffValue(FlatBufferBuilder builder, int buffValue) { builder.AddInt(6, buffValue, 0); }
  public static void AddBuffDuration(FlatBufferBuilder builder, int BuffDuration) { builder.AddInt(7, BuffDuration, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(8, Weight, 0); }
  public static Offset<GameConfigs.RoomLikeRowData> EndRoomLikeRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomLikeRowData>(o);
  }
};

public struct RoomLike : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RoomLike GetRootAsRoomLike(ByteBuffer _bb) { return GetRootAsRoomLike(_bb, new RoomLike()); }
  public static RoomLike GetRootAsRoomLike(ByteBuffer _bb, RoomLike obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoomLike __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.RoomLikeRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.RoomLikeRowData?)(new GameConfigs.RoomLikeRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.RoomLike> CreateRoomLike(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RoomLike.AddDatalist(builder, datalistOffset);
    return RoomLike.EndRoomLike(builder);
  }

  public static void StartRoomLike(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.RoomLikeRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.RoomLikeRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.RoomLike> EndRoomLike(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.RoomLike>(o);
  }
  public static void FinishRoomLikeBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomLike> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedRoomLikeBuffer(FlatBufferBuilder builder, Offset<GameConfigs.RoomLike> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
