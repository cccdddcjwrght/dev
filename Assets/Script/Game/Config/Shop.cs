// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ShopRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ShopRowData GetRootAsShopRowData(ByteBuffer _bb) { return GetRootAsShopRowData(_bb, new ShopRowData()); }
  public static ShopRowData GetRootAsShopRowData(ByteBuffer _bb, ShopRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ShopRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ShopName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShopNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetShopNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetShopNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ShopDes { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShopDesBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetShopDesBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetShopDesArray() { return __p.__vector_as_array<byte>(8); }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public int Area { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShopType { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Priority { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Unlock(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int UnlockLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetUnlockBytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetUnlockBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetUnlockArray() { return __p.__vector_as_array<int>(18); }
  public int LimitType { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LimitNum { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PurchaseType { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Price { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Cd { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FreeTime { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FreeCd { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Item1(int j) { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Item1Length { get { int o = __p.__offset(34); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItem1Bytes() { return __p.__vector_as_span<int>(34, 4); }
#else
  public ArraySegment<byte>? GetItem1Bytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public int[] GetItem1Array() { return __p.__vector_as_array<int>(34); }
  public int Item2(int j) { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Item2Length { get { int o = __p.__offset(36); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItem2Bytes() { return __p.__vector_as_span<int>(36, 4); }
#else
  public ArraySegment<byte>? GetItem2Bytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public int[] GetItem2Array() { return __p.__vector_as_array<int>(36); }
  public int Item3(int j) { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Item3Length { get { int o = __p.__offset(38); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItem3Bytes() { return __p.__vector_as_span<int>(38, 4); }
#else
  public ArraySegment<byte>? GetItem3Bytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public int[] GetItem3Array() { return __p.__vector_as_array<int>(38); }
  public int Item4(int j) { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Item4Length { get { int o = __p.__offset(40); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetItem4Bytes() { return __p.__vector_as_span<int>(40, 4); }
#else
  public ArraySegment<byte>? GetItem4Bytes() { return __p.__vector_as_arraysegment(40); }
#endif
  public int[] GetItem4Array() { return __p.__vector_as_array<int>(40); }
  public int ChestInfo(int j) { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ChestInfoLength { get { int o = __p.__offset(42); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetChestInfoBytes() { return __p.__vector_as_span<int>(42, 4); }
#else
  public ArraySegment<byte>? GetChestInfoBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public int[] GetChestInfoArray() { return __p.__vector_as_array<int>(42); }
  public string MarkValue { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMarkValueBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetMarkValueBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetMarkValueArray() { return __p.__vector_as_array<byte>(44); }
  public int UnlockArea { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ChestOpen { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChestOpenBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetChestOpenBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetChestOpenArray() { return __p.__vector_as_array<byte>(48); }

  public static Offset<GameConfigs.ShopRowData> CreateShopRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset ShopNameOffset = default(StringOffset),
      StringOffset ShopDesOffset = default(StringOffset),
      StringOffset IconOffset = default(StringOffset),
      int Area = 0,
      int ShopType = 0,
      int Priority = 0,
      VectorOffset UnlockOffset = default(VectorOffset),
      int LimitType = 0,
      int LimitNum = 0,
      int PurchaseType = 0,
      float Price = 0.0f,
      int Cd = 0,
      int FreeTime = 0,
      int FreeCd = 0,
      VectorOffset Item1Offset = default(VectorOffset),
      VectorOffset Item2Offset = default(VectorOffset),
      VectorOffset Item3Offset = default(VectorOffset),
      VectorOffset Item4Offset = default(VectorOffset),
      VectorOffset ChestInfoOffset = default(VectorOffset),
      StringOffset MarkValueOffset = default(StringOffset),
      int UnlockArea = 0,
      StringOffset ChestOpenOffset = default(StringOffset)) {
    builder.StartTable(23);
    ShopRowData.AddChestOpen(builder, ChestOpenOffset);
    ShopRowData.AddUnlockArea(builder, UnlockArea);
    ShopRowData.AddMarkValue(builder, MarkValueOffset);
    ShopRowData.AddChestInfo(builder, ChestInfoOffset);
    ShopRowData.AddItem4(builder, Item4Offset);
    ShopRowData.AddItem3(builder, Item3Offset);
    ShopRowData.AddItem2(builder, Item2Offset);
    ShopRowData.AddItem1(builder, Item1Offset);
    ShopRowData.AddFreeCd(builder, FreeCd);
    ShopRowData.AddFreeTime(builder, FreeTime);
    ShopRowData.AddCd(builder, Cd);
    ShopRowData.AddPrice(builder, Price);
    ShopRowData.AddPurchaseType(builder, PurchaseType);
    ShopRowData.AddLimitNum(builder, LimitNum);
    ShopRowData.AddLimitType(builder, LimitType);
    ShopRowData.AddUnlock(builder, UnlockOffset);
    ShopRowData.AddPriority(builder, Priority);
    ShopRowData.AddShopType(builder, ShopType);
    ShopRowData.AddArea(builder, Area);
    ShopRowData.AddIcon(builder, IconOffset);
    ShopRowData.AddShopDes(builder, ShopDesOffset);
    ShopRowData.AddShopName(builder, ShopNameOffset);
    ShopRowData.AddId(builder, Id);
    return ShopRowData.EndShopRowData(builder);
  }

  public static void StartShopRowData(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddShopName(FlatBufferBuilder builder, StringOffset ShopNameOffset) { builder.AddOffset(1, ShopNameOffset.Value, 0); }
  public static void AddShopDes(FlatBufferBuilder builder, StringOffset ShopDesOffset) { builder.AddOffset(2, ShopDesOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset IconOffset) { builder.AddOffset(3, IconOffset.Value, 0); }
  public static void AddArea(FlatBufferBuilder builder, int Area) { builder.AddInt(4, Area, 0); }
  public static void AddShopType(FlatBufferBuilder builder, int ShopType) { builder.AddInt(5, ShopType, 0); }
  public static void AddPriority(FlatBufferBuilder builder, int Priority) { builder.AddInt(6, Priority, 0); }
  public static void AddUnlock(FlatBufferBuilder builder, VectorOffset UnlockOffset) { builder.AddOffset(7, UnlockOffset.Value, 0); }
  public static VectorOffset CreateUnlockVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateUnlockVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUnlockVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddLimitType(FlatBufferBuilder builder, int LimitType) { builder.AddInt(8, LimitType, 0); }
  public static void AddLimitNum(FlatBufferBuilder builder, int LimitNum) { builder.AddInt(9, LimitNum, 0); }
  public static void AddPurchaseType(FlatBufferBuilder builder, int PurchaseType) { builder.AddInt(10, PurchaseType, 0); }
  public static void AddPrice(FlatBufferBuilder builder, float Price) { builder.AddFloat(11, Price, 0.0f); }
  public static void AddCd(FlatBufferBuilder builder, int Cd) { builder.AddInt(12, Cd, 0); }
  public static void AddFreeTime(FlatBufferBuilder builder, int FreeTime) { builder.AddInt(13, FreeTime, 0); }
  public static void AddFreeCd(FlatBufferBuilder builder, int FreeCd) { builder.AddInt(14, FreeCd, 0); }
  public static void AddItem1(FlatBufferBuilder builder, VectorOffset Item1Offset) { builder.AddOffset(15, Item1Offset.Value, 0); }
  public static VectorOffset CreateItem1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItem1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItem1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItem2(FlatBufferBuilder builder, VectorOffset Item2Offset) { builder.AddOffset(16, Item2Offset.Value, 0); }
  public static VectorOffset CreateItem2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItem2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItem2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItem3(FlatBufferBuilder builder, VectorOffset Item3Offset) { builder.AddOffset(17, Item3Offset.Value, 0); }
  public static VectorOffset CreateItem3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItem3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItem3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddItem4(FlatBufferBuilder builder, VectorOffset Item4Offset) { builder.AddOffset(18, Item4Offset.Value, 0); }
  public static VectorOffset CreateItem4Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateItem4VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartItem4Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddChestInfo(FlatBufferBuilder builder, VectorOffset ChestInfoOffset) { builder.AddOffset(19, ChestInfoOffset.Value, 0); }
  public static VectorOffset CreateChestInfoVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateChestInfoVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartChestInfoVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMarkValue(FlatBufferBuilder builder, StringOffset MarkValueOffset) { builder.AddOffset(20, MarkValueOffset.Value, 0); }
  public static void AddUnlockArea(FlatBufferBuilder builder, int UnlockArea) { builder.AddInt(21, UnlockArea, 0); }
  public static void AddChestOpen(FlatBufferBuilder builder, StringOffset ChestOpenOffset) { builder.AddOffset(22, ChestOpenOffset.Value, 0); }
  public static Offset<GameConfigs.ShopRowData> EndShopRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.ShopRowData>(o);
  }
};

public struct Shop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Shop GetRootAsShop(ByteBuffer _bb) { return GetRootAsShop(_bb, new Shop()); }
  public static Shop GetRootAsShop(ByteBuffer _bb, Shop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Shop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.ShopRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.ShopRowData?)(new GameConfigs.ShopRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Shop> CreateShop(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Shop.AddDatalist(builder, datalistOffset);
    return Shop.EndShop(builder);
  }

  public static void StartShop(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.ShopRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.ShopRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Shop> EndShop(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Shop>(o);
  }
  public static void FinishShopBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Shop> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedShopBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Shop> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
