// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Event_GroupRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Event_GroupRowData GetRootAsEvent_GroupRowData(ByteBuffer _bb) { return GetRootAsEvent_GroupRowData(_bb, new Event_GroupRowData()); }
  public static Event_GroupRowData GetRootAsEvent_GroupRowData(ByteBuffer _bb, Event_GroupRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event_GroupRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GroupId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GroupType1 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PartId1(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PartId1Length { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPartId1Bytes() { return __p.__vector_as_span<int>(8, 4); }
#else
  public ArraySegment<byte>? GetPartId1Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetPartId1Array() { return __p.__vector_as_array<int>(8); }
  public int GroupType2 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PartId2(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PartId2Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPartId2Bytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetPartId2Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetPartId2Array() { return __p.__vector_as_array<int>(12); }
  public int GroupType3 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PartId3(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int PartId3Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetPartId3Bytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetPartId3Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetPartId3Array() { return __p.__vector_as_array<int>(16); }

  public static Offset<GameConfigs.Event_GroupRowData> CreateEvent_GroupRowData(FlatBufferBuilder builder,
      int GroupId = 0,
      int GroupType1 = 0,
      VectorOffset PartId1Offset = default(VectorOffset),
      int GroupType2 = 0,
      VectorOffset PartId2Offset = default(VectorOffset),
      int GroupType3 = 0,
      VectorOffset PartId3Offset = default(VectorOffset)) {
    builder.StartTable(7);
    Event_GroupRowData.AddPartId3(builder, PartId3Offset);
    Event_GroupRowData.AddGroupType3(builder, GroupType3);
    Event_GroupRowData.AddPartId2(builder, PartId2Offset);
    Event_GroupRowData.AddGroupType2(builder, GroupType2);
    Event_GroupRowData.AddPartId1(builder, PartId1Offset);
    Event_GroupRowData.AddGroupType1(builder, GroupType1);
    Event_GroupRowData.AddGroupId(builder, GroupId);
    return Event_GroupRowData.EndEvent_GroupRowData(builder);
  }

  public static void StartEvent_GroupRowData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGroupId(FlatBufferBuilder builder, int GroupId) { builder.AddInt(0, GroupId, 0); }
  public static void AddGroupType1(FlatBufferBuilder builder, int GroupType1) { builder.AddInt(1, GroupType1, 0); }
  public static void AddPartId1(FlatBufferBuilder builder, VectorOffset PartId1Offset) { builder.AddOffset(2, PartId1Offset.Value, 0); }
  public static VectorOffset CreatePartId1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePartId1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartId1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroupType2(FlatBufferBuilder builder, int GroupType2) { builder.AddInt(3, GroupType2, 0); }
  public static void AddPartId2(FlatBufferBuilder builder, VectorOffset PartId2Offset) { builder.AddOffset(4, PartId2Offset.Value, 0); }
  public static VectorOffset CreatePartId2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePartId2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartId2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGroupType3(FlatBufferBuilder builder, int GroupType3) { builder.AddInt(5, GroupType3, 0); }
  public static void AddPartId3(FlatBufferBuilder builder, VectorOffset PartId3Offset) { builder.AddOffset(6, PartId3Offset.Value, 0); }
  public static VectorOffset CreatePartId3Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePartId3VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPartId3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Event_GroupRowData> EndEvent_GroupRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Event_GroupRowData>(o);
  }
};

public struct Event_Group : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Event_Group GetRootAsEvent_Group(ByteBuffer _bb) { return GetRootAsEvent_Group(_bb, new Event_Group()); }
  public static Event_Group GetRootAsEvent_Group(ByteBuffer _bb, Event_Group obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Event_Group __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Event_GroupRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Event_GroupRowData?)(new GameConfigs.Event_GroupRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Event_Group> CreateEvent_Group(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Event_Group.AddDatalist(builder, datalistOffset);
    return Event_Group.EndEvent_Group(builder);
  }

  public static void StartEvent_Group(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Event_GroupRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Event_GroupRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Event_Group> EndEvent_Group(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Event_Group>(o);
  }
  public static void FinishEvent_GroupBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Event_Group> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedEvent_GroupBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Event_Group> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
