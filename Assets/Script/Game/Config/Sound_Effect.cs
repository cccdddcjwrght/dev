// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Sound_EffectRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Sound_EffectRowData GetRootAsSound_EffectRowData(ByteBuffer _bb) { return GetRootAsSound_EffectRowData(_bb, new Sound_EffectRowData()); }
  public static Sound_EffectRowData GetRootAsSound_EffectRowData(ByteBuffer _bb, Sound_EffectRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sound_EffectRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public float Time { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Loop { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Type { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.Sound_EffectRowData> CreateSound_EffectRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      float Time = 0.0f,
      int Loop = 0,
      int Type = 0) {
    builder.StartTable(5);
    Sound_EffectRowData.AddType(builder, Type);
    Sound_EffectRowData.AddLoop(builder, Loop);
    Sound_EffectRowData.AddTime(builder, Time);
    Sound_EffectRowData.AddName(builder, NameOffset);
    Sound_EffectRowData.AddId(builder, Id);
    return Sound_EffectRowData.EndSound_EffectRowData(builder);
  }

  public static void StartSound_EffectRowData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddTime(FlatBufferBuilder builder, float Time) { builder.AddFloat(2, Time, 0.0f); }
  public static void AddLoop(FlatBufferBuilder builder, int Loop) { builder.AddInt(3, Loop, 0); }
  public static void AddType(FlatBufferBuilder builder, int Type) { builder.AddInt(4, Type, 0); }
  public static Offset<GameConfigs.Sound_EffectRowData> EndSound_EffectRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Sound_EffectRowData>(o);
  }
};

public struct Sound_Effect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Sound_Effect GetRootAsSound_Effect(ByteBuffer _bb) { return GetRootAsSound_Effect(_bb, new Sound_Effect()); }
  public static Sound_Effect GetRootAsSound_Effect(ByteBuffer _bb, Sound_Effect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sound_Effect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.Sound_EffectRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.Sound_EffectRowData?)(new GameConfigs.Sound_EffectRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.Sound_Effect> CreateSound_Effect(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Sound_Effect.AddDatalist(builder, datalistOffset);
    return Sound_Effect.EndSound_Effect(builder);
  }

  public static void StartSound_Effect(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.Sound_EffectRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.Sound_EffectRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.Sound_Effect> EndSound_Effect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.Sound_Effect>(o);
  }
  public static void FinishSound_EffectBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Sound_Effect> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSound_EffectBuffer(FlatBufferBuilder builder, Offset<GameConfigs.Sound_Effect> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
