// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SettingConfigRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SettingConfigRowData GetRootAsSettingConfigRowData(ByteBuffer _bb) { return GetRootAsSettingConfigRowData(_bb, new SettingConfigRowData()); }
  public static SettingConfigRowData GetRootAsSettingConfigRowData(ByteBuffer _bb, SettingConfigRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SettingConfigRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public int Sort { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Res { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetResBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetResArray() { return __p.__vector_as_array<byte>(8); }
  public string Icon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetIconArray() { return __p.__vector_as_array<byte>(10); }
  public string Title { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(12); }
  public int Type { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Method { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Args { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetArgsBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetArgsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetArgsArray() { return __p.__vector_as_array<byte>(18); }
  public string Label { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLabelBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetLabelBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetLabelArray() { return __p.__vector_as_array<byte>(20); }
  public int Val { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GameConfigs.SettingConfigRowData> CreateSettingConfigRowData(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      int sort = 0,
      StringOffset resOffset = default(StringOffset),
      StringOffset iconOffset = default(StringOffset),
      StringOffset titleOffset = default(StringOffset),
      int type = 0,
      int method = 0,
      StringOffset argsOffset = default(StringOffset),
      StringOffset labelOffset = default(StringOffset),
      int val = 0) {
    builder.StartTable(10);
    SettingConfigRowData.AddVal(builder, val);
    SettingConfigRowData.AddLabel(builder, labelOffset);
    SettingConfigRowData.AddArgs(builder, argsOffset);
    SettingConfigRowData.AddMethod(builder, method);
    SettingConfigRowData.AddType(builder, type);
    SettingConfigRowData.AddTitle(builder, titleOffset);
    SettingConfigRowData.AddIcon(builder, iconOffset);
    SettingConfigRowData.AddRes(builder, resOffset);
    SettingConfigRowData.AddSort(builder, sort);
    SettingConfigRowData.AddId(builder, idOffset);
    return SettingConfigRowData.EndSettingConfigRowData(builder);
  }

  public static void StartSettingConfigRowData(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddSort(FlatBufferBuilder builder, int sort) { builder.AddInt(1, sort, 0); }
  public static void AddRes(FlatBufferBuilder builder, StringOffset resOffset) { builder.AddOffset(2, resOffset.Value, 0); }
  public static void AddIcon(FlatBufferBuilder builder, StringOffset iconOffset) { builder.AddOffset(3, iconOffset.Value, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(4, titleOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(5, type, 0); }
  public static void AddMethod(FlatBufferBuilder builder, int method) { builder.AddInt(6, method, 0); }
  public static void AddArgs(FlatBufferBuilder builder, StringOffset argsOffset) { builder.AddOffset(7, argsOffset.Value, 0); }
  public static void AddLabel(FlatBufferBuilder builder, StringOffset labelOffset) { builder.AddOffset(8, labelOffset.Value, 0); }
  public static void AddVal(FlatBufferBuilder builder, int val) { builder.AddInt(9, val, 0); }
  public static Offset<GameConfigs.SettingConfigRowData> EndSettingConfigRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.SettingConfigRowData>(o);
  }
};

public struct SettingConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SettingConfig GetRootAsSettingConfig(ByteBuffer _bb) { return GetRootAsSettingConfig(_bb, new SettingConfig()); }
  public static SettingConfig GetRootAsSettingConfig(ByteBuffer _bb, SettingConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SettingConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.SettingConfigRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.SettingConfigRowData?)(new GameConfigs.SettingConfigRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.SettingConfig> CreateSettingConfig(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SettingConfig.AddDatalist(builder, datalistOffset);
    return SettingConfig.EndSettingConfig(builder);
  }

  public static void StartSettingConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.SettingConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.SettingConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.SettingConfig> EndSettingConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.SettingConfig>(o);
  }
  public static void FinishSettingConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.SettingConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSettingConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.SettingConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
