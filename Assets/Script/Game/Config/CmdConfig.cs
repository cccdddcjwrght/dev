// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CmdConfigRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CmdConfigRowData GetRootAsCmdConfigRowData(ByteBuffer _bb) { return GetRootAsCmdConfigRowData(_bb, new CmdConfigRowData()); }
  public static CmdConfigRowData GetRootAsCmdConfigRowData(ByteBuffer _bb, CmdConfigRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CmdConfigRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Desc { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescArray() { return __p.__vector_as_array<byte>(6); }
  public string Cmd { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCmdBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCmdBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCmdArray() { return __p.__vector_as_array<byte>(8); }
  public int Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Cfg { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCfgBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCfgBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCfgArray() { return __p.__vector_as_array<byte>(12); }
  public string Res { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetResBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetResArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<GameConfigs.CmdConfigRowData> CreateCmdConfigRowData(FlatBufferBuilder builder,
      int id = 0,
      StringOffset descOffset = default(StringOffset),
      StringOffset cmdOffset = default(StringOffset),
      int type = 0,
      StringOffset cfgOffset = default(StringOffset),
      StringOffset resOffset = default(StringOffset)) {
    builder.StartTable(6);
    CmdConfigRowData.AddRes(builder, resOffset);
    CmdConfigRowData.AddCfg(builder, cfgOffset);
    CmdConfigRowData.AddType(builder, type);
    CmdConfigRowData.AddCmd(builder, cmdOffset);
    CmdConfigRowData.AddDesc(builder, descOffset);
    CmdConfigRowData.AddId(builder, id);
    return CmdConfigRowData.EndCmdConfigRowData(builder);
  }

  public static void StartCmdConfigRowData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddDesc(FlatBufferBuilder builder, StringOffset descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static void AddCmd(FlatBufferBuilder builder, StringOffset cmdOffset) { builder.AddOffset(2, cmdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, int type) { builder.AddInt(3, type, 0); }
  public static void AddCfg(FlatBufferBuilder builder, StringOffset cfgOffset) { builder.AddOffset(4, cfgOffset.Value, 0); }
  public static void AddRes(FlatBufferBuilder builder, StringOffset resOffset) { builder.AddOffset(5, resOffset.Value, 0); }
  public static Offset<GameConfigs.CmdConfigRowData> EndCmdConfigRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.CmdConfigRowData>(o);
  }
};

public struct CmdConfig : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static CmdConfig GetRootAsCmdConfig(ByteBuffer _bb) { return GetRootAsCmdConfig(_bb, new CmdConfig()); }
  public static CmdConfig GetRootAsCmdConfig(ByteBuffer _bb, CmdConfig obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CmdConfig __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.CmdConfigRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.CmdConfigRowData?)(new GameConfigs.CmdConfigRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.CmdConfig> CreateCmdConfig(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CmdConfig.AddDatalist(builder, datalistOffset);
    return CmdConfig.EndCmdConfig(builder);
  }

  public static void StartCmdConfig(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.CmdConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.CmdConfigRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.CmdConfig> EndCmdConfig(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.CmdConfig>(o);
  }
  public static void FinishCmdConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.CmdConfig> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedCmdConfigBuffer(FlatBufferBuilder builder, Offset<GameConfigs.CmdConfig> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
