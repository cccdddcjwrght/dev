// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GameConfigs
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BattleLevelRowData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BattleLevelRowData GetRootAsBattleLevelRowData(ByteBuffer _bb) { return GetRootAsBattleLevelRowData(_bb, new BattleLevelRowData()); }
  public static BattleLevelRowData GetRootAsBattleLevelRowData(ByteBuffer _bb, BattleLevelRowData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattleLevelRowData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public int Monster { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Inning { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardId1(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardId1Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardId1Bytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetRewardId1Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetRewardId1Array() { return __p.__vector_as_array<int>(12); }
  public int RewardNum1(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardNum1Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardNum1Bytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetRewardNum1Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetRewardNum1Array() { return __p.__vector_as_array<int>(14); }
  public int RewardId2(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardId2Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardId2Bytes() { return __p.__vector_as_span<int>(16, 4); }
#else
  public ArraySegment<byte>? GetRewardId2Bytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetRewardId2Array() { return __p.__vector_as_array<int>(16); }
  public int RewardNum2(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int RewardNum2Length { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetRewardNum2Bytes() { return __p.__vector_as_span<int>(18, 4); }
#else
  public ArraySegment<byte>? GetRewardNum2Bytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public int[] GetRewardNum2Array() { return __p.__vector_as_array<int>(18); }

  public static Offset<GameConfigs.BattleLevelRowData> CreateBattleLevelRowData(FlatBufferBuilder builder,
      int Id = 0,
      StringOffset NameOffset = default(StringOffset),
      int Monster = 0,
      int Inning = 0,
      VectorOffset RewardId1Offset = default(VectorOffset),
      VectorOffset RewardNum1Offset = default(VectorOffset),
      VectorOffset RewardId2Offset = default(VectorOffset),
      VectorOffset RewardNum2Offset = default(VectorOffset)) {
    builder.StartTable(8);
    BattleLevelRowData.AddRewardNum2(builder, RewardNum2Offset);
    BattleLevelRowData.AddRewardId2(builder, RewardId2Offset);
    BattleLevelRowData.AddRewardNum1(builder, RewardNum1Offset);
    BattleLevelRowData.AddRewardId1(builder, RewardId1Offset);
    BattleLevelRowData.AddInning(builder, Inning);
    BattleLevelRowData.AddMonster(builder, Monster);
    BattleLevelRowData.AddName(builder, NameOffset);
    BattleLevelRowData.AddId(builder, Id);
    return BattleLevelRowData.EndBattleLevelRowData(builder);
  }

  public static void StartBattleLevelRowData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void AddMonster(FlatBufferBuilder builder, int Monster) { builder.AddInt(2, Monster, 0); }
  public static void AddInning(FlatBufferBuilder builder, int Inning) { builder.AddInt(3, Inning, 0); }
  public static void AddRewardId1(FlatBufferBuilder builder, VectorOffset RewardId1Offset) { builder.AddOffset(4, RewardId1Offset.Value, 0); }
  public static VectorOffset CreateRewardId1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardId1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardId1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardNum1(FlatBufferBuilder builder, VectorOffset RewardNum1Offset) { builder.AddOffset(5, RewardNum1Offset.Value, 0); }
  public static VectorOffset CreateRewardNum1Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardNum1VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardNum1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardId2(FlatBufferBuilder builder, VectorOffset RewardId2Offset) { builder.AddOffset(6, RewardId2Offset.Value, 0); }
  public static VectorOffset CreateRewardId2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardId2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardId2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRewardNum2(FlatBufferBuilder builder, VectorOffset RewardNum2Offset) { builder.AddOffset(7, RewardNum2Offset.Value, 0); }
  public static VectorOffset CreateRewardNum2Vector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateRewardNum2VectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRewardNum2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.BattleLevelRowData> EndBattleLevelRowData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.BattleLevelRowData>(o);
  }
};

public struct BattleLevel : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BattleLevel GetRootAsBattleLevel(ByteBuffer _bb) { return GetRootAsBattleLevel(_bb, new BattleLevel()); }
  public static BattleLevel GetRootAsBattleLevel(ByteBuffer _bb, BattleLevel obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BattleLevel __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GameConfigs.BattleLevelRowData? Datalist(int j) { int o = __p.__offset(4); return o != 0 ? (GameConfigs.BattleLevelRowData?)(new GameConfigs.BattleLevelRowData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DatalistLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GameConfigs.BattleLevel> CreateBattleLevel(FlatBufferBuilder builder,
      VectorOffset datalistOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BattleLevel.AddDatalist(builder, datalistOffset);
    return BattleLevel.EndBattleLevel(builder);
  }

  public static void StartBattleLevel(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddDatalist(FlatBufferBuilder builder, VectorOffset datalistOffset) { builder.AddOffset(0, datalistOffset.Value, 0); }
  public static VectorOffset CreateDatalistVector(FlatBufferBuilder builder, Offset<GameConfigs.BattleLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDatalistVectorBlock(FlatBufferBuilder builder, Offset<GameConfigs.BattleLevelRowData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDatalistVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GameConfigs.BattleLevel> EndBattleLevel(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GameConfigs.BattleLevel>(o);
  }
  public static void FinishBattleLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.BattleLevel> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBattleLevelBuffer(FlatBufferBuilder builder, Offset<GameConfigs.BattleLevel> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
